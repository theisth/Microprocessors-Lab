
lab3p3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b44  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08000c00  08000c00  00010c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000ca0  08000ca0  00010ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000ca4  08000ca4  00010ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010ca8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000003c  20000000  08000ca8  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000003c  08000ca8  0002003c  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00010ca8  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000e9e  00000000  00000000  00010cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000003ed  00000000  00000000  00011b6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000140  00000000  00000000  00011f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000118  00000000  00000000  000120a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   000009ca  00000000  00000000  000121b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    000006fa  00000000  00000000  00012b82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .comment      00000050  00000000  00000000  0001327c  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000003c0  00000000  00000000  000132cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000000 	.word	0x20000000
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08000be8 	.word	0x08000be8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000004 	.word	0x20000004
 8000100:	08000be8 	.word	0x08000be8

08000104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000104:	b580      	push	{r7, lr}
 8000106:	b082      	sub	sp, #8
 8000108:	af00      	add	r7, sp, #0
 800010a:	0002      	movs	r2, r0
 800010c:	1dfb      	adds	r3, r7, #7
 800010e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000110:	1dfb      	adds	r3, r7, #7
 8000112:	781b      	ldrb	r3, [r3, #0]
 8000114:	2b7f      	cmp	r3, #127	; 0x7f
 8000116:	d809      	bhi.n	800012c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000118:	1dfb      	adds	r3, r7, #7
 800011a:	781b      	ldrb	r3, [r3, #0]
 800011c:	001a      	movs	r2, r3
 800011e:	231f      	movs	r3, #31
 8000120:	401a      	ands	r2, r3
 8000122:	4b04      	ldr	r3, [pc, #16]	; (8000134 <__NVIC_EnableIRQ+0x30>)
 8000124:	2101      	movs	r1, #1
 8000126:	4091      	lsls	r1, r2
 8000128:	000a      	movs	r2, r1
 800012a:	601a      	str	r2, [r3, #0]
  }
}
 800012c:	46c0      	nop			; (mov r8, r8)
 800012e:	46bd      	mov	sp, r7
 8000130:	b002      	add	sp, #8
 8000132:	bd80      	pop	{r7, pc}
 8000134:	e000e100 	.word	0xe000e100

08000138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000138:	b590      	push	{r4, r7, lr}
 800013a:	b083      	sub	sp, #12
 800013c:	af00      	add	r7, sp, #0
 800013e:	0002      	movs	r2, r0
 8000140:	6039      	str	r1, [r7, #0]
 8000142:	1dfb      	adds	r3, r7, #7
 8000144:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000146:	1dfb      	adds	r3, r7, #7
 8000148:	781b      	ldrb	r3, [r3, #0]
 800014a:	2b7f      	cmp	r3, #127	; 0x7f
 800014c:	d828      	bhi.n	80001a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800014e:	4a2f      	ldr	r2, [pc, #188]	; (800020c <__NVIC_SetPriority+0xd4>)
 8000150:	1dfb      	adds	r3, r7, #7
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	b25b      	sxtb	r3, r3
 8000156:	089b      	lsrs	r3, r3, #2
 8000158:	33c0      	adds	r3, #192	; 0xc0
 800015a:	009b      	lsls	r3, r3, #2
 800015c:	589b      	ldr	r3, [r3, r2]
 800015e:	1dfa      	adds	r2, r7, #7
 8000160:	7812      	ldrb	r2, [r2, #0]
 8000162:	0011      	movs	r1, r2
 8000164:	2203      	movs	r2, #3
 8000166:	400a      	ands	r2, r1
 8000168:	00d2      	lsls	r2, r2, #3
 800016a:	21ff      	movs	r1, #255	; 0xff
 800016c:	4091      	lsls	r1, r2
 800016e:	000a      	movs	r2, r1
 8000170:	43d2      	mvns	r2, r2
 8000172:	401a      	ands	r2, r3
 8000174:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000176:	683b      	ldr	r3, [r7, #0]
 8000178:	019b      	lsls	r3, r3, #6
 800017a:	22ff      	movs	r2, #255	; 0xff
 800017c:	401a      	ands	r2, r3
 800017e:	1dfb      	adds	r3, r7, #7
 8000180:	781b      	ldrb	r3, [r3, #0]
 8000182:	0018      	movs	r0, r3
 8000184:	2303      	movs	r3, #3
 8000186:	4003      	ands	r3, r0
 8000188:	00db      	lsls	r3, r3, #3
 800018a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800018c:	481f      	ldr	r0, [pc, #124]	; (800020c <__NVIC_SetPriority+0xd4>)
 800018e:	1dfb      	adds	r3, r7, #7
 8000190:	781b      	ldrb	r3, [r3, #0]
 8000192:	b25b      	sxtb	r3, r3
 8000194:	089b      	lsrs	r3, r3, #2
 8000196:	430a      	orrs	r2, r1
 8000198:	33c0      	adds	r3, #192	; 0xc0
 800019a:	009b      	lsls	r3, r3, #2
 800019c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800019e:	e031      	b.n	8000204 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001a0:	4a1b      	ldr	r2, [pc, #108]	; (8000210 <__NVIC_SetPriority+0xd8>)
 80001a2:	1dfb      	adds	r3, r7, #7
 80001a4:	781b      	ldrb	r3, [r3, #0]
 80001a6:	0019      	movs	r1, r3
 80001a8:	230f      	movs	r3, #15
 80001aa:	400b      	ands	r3, r1
 80001ac:	3b08      	subs	r3, #8
 80001ae:	089b      	lsrs	r3, r3, #2
 80001b0:	3306      	adds	r3, #6
 80001b2:	009b      	lsls	r3, r3, #2
 80001b4:	18d3      	adds	r3, r2, r3
 80001b6:	3304      	adds	r3, #4
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	1dfa      	adds	r2, r7, #7
 80001bc:	7812      	ldrb	r2, [r2, #0]
 80001be:	0011      	movs	r1, r2
 80001c0:	2203      	movs	r2, #3
 80001c2:	400a      	ands	r2, r1
 80001c4:	00d2      	lsls	r2, r2, #3
 80001c6:	21ff      	movs	r1, #255	; 0xff
 80001c8:	4091      	lsls	r1, r2
 80001ca:	000a      	movs	r2, r1
 80001cc:	43d2      	mvns	r2, r2
 80001ce:	401a      	ands	r2, r3
 80001d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80001d2:	683b      	ldr	r3, [r7, #0]
 80001d4:	019b      	lsls	r3, r3, #6
 80001d6:	22ff      	movs	r2, #255	; 0xff
 80001d8:	401a      	ands	r2, r3
 80001da:	1dfb      	adds	r3, r7, #7
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	0018      	movs	r0, r3
 80001e0:	2303      	movs	r3, #3
 80001e2:	4003      	ands	r3, r0
 80001e4:	00db      	lsls	r3, r3, #3
 80001e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001e8:	4809      	ldr	r0, [pc, #36]	; (8000210 <__NVIC_SetPriority+0xd8>)
 80001ea:	1dfb      	adds	r3, r7, #7
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	001c      	movs	r4, r3
 80001f0:	230f      	movs	r3, #15
 80001f2:	4023      	ands	r3, r4
 80001f4:	3b08      	subs	r3, #8
 80001f6:	089b      	lsrs	r3, r3, #2
 80001f8:	430a      	orrs	r2, r1
 80001fa:	3306      	adds	r3, #6
 80001fc:	009b      	lsls	r3, r3, #2
 80001fe:	18c3      	adds	r3, r0, r3
 8000200:	3304      	adds	r3, #4
 8000202:	601a      	str	r2, [r3, #0]
}
 8000204:	46c0      	nop			; (mov r8, r8)
 8000206:	46bd      	mov	sp, r7
 8000208:	b003      	add	sp, #12
 800020a:	bd90      	pop	{r4, r7, pc}
 800020c:	e000e100 	.word	0xe000e100
 8000210:	e000ed00 	.word	0xe000ed00

08000214 <main>:
int stop_ct = 0;				// Stop Counter
int flag = 0;					// Finish Flag



int main(void) {
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0

	RCC_config();
 8000218:	f000 fc72 	bl	8000b00 <RCC_config>
	GPIO_config();
 800021c:	f000 f85c 	bl	80002d8 <GPIO_config>
	systickInit();
 8000220:	f000 f830 	bl	8000284 <systickInit>
	EXTI_config();
 8000224:	f000 fbfc 	bl	8000a20 <EXTI_config>


    while(1) {

    	while(stop_ct < 1000)
 8000228:	e001      	b.n	800022e <main+0x1a>
    	{
    		action(); // main code
 800022a:	f000 fb49 	bl	80008c0 <action>
    	while(stop_ct < 1000)
 800022e:	4b03      	ldr	r3, [pc, #12]	; (800023c <main+0x28>)
 8000230:	681a      	ldr	r2, [r3, #0]
 8000232:	23fa      	movs	r3, #250	; 0xfa
 8000234:	009b      	lsls	r3, r3, #2
 8000236:	429a      	cmp	r2, r3
 8000238:	dbf7      	blt.n	800022a <main+0x16>
 800023a:	e7f8      	b.n	800022e <main+0x1a>
 800023c:	20000034 	.word	0x20000034

08000240 <SysTick_Handler>:




void SysTick_Handler(void) // Interrupt function
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
	millis++;      // millis increase +1
 8000244:	4b03      	ldr	r3, [pc, #12]	; (8000254 <SysTick_Handler+0x14>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	1c5a      	adds	r2, r3, #1
 800024a:	4b02      	ldr	r3, [pc, #8]	; (8000254 <SysTick_Handler+0x14>)
 800024c:	601a      	str	r2, [r3, #0]
}
 800024e:	46c0      	nop			; (mov r8, r8)
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	2000002c 	.word	0x2000002c

08000258 <delay_ms>:

void delay_ms(int ms)  // ms delay function
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
	int delay = millis+ms;
 8000260:	4b07      	ldr	r3, [pc, #28]	; (8000280 <delay_ms+0x28>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	687a      	ldr	r2, [r7, #4]
 8000266:	18d3      	adds	r3, r2, r3
 8000268:	60fb      	str	r3, [r7, #12]
	while(millis<delay);
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	4b04      	ldr	r3, [pc, #16]	; (8000280 <delay_ms+0x28>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	68fa      	ldr	r2, [r7, #12]
 8000272:	429a      	cmp	r2, r3
 8000274:	dcfa      	bgt.n	800026c <delay_ms+0x14>
}
 8000276:	46c0      	nop			; (mov r8, r8)
 8000278:	46c0      	nop			; (mov r8, r8)
 800027a:	46bd      	mov	sp, r7
 800027c:	b004      	add	sp, #16
 800027e:	bd80      	pop	{r7, pc}
 8000280:	2000002c 	.word	0x2000002c

08000284 <systickInit>:

void systickInit(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0

	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk; 	// counter activated
 8000288:	4b12      	ldr	r3, [pc, #72]	; (80002d4 <systickInit+0x50>)
 800028a:	681a      	ldr	r2, [r3, #0]
 800028c:	4b11      	ldr	r3, [pc, #68]	; (80002d4 <systickInit+0x50>)
 800028e:	2101      	movs	r1, #1
 8000290:	430a      	orrs	r2, r1
 8000292:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 49;                     	// Reload value
 8000294:	4b0f      	ldr	r3, [pc, #60]	; (80002d4 <systickInit+0x50>)
 8000296:	2231      	movs	r2, #49	; 0x31
 8000298:	605a      	str	r2, [r3, #4]
	SysTick->VAL=0;                        		// reset counter
 800029a:	4b0e      	ldr	r3, [pc, #56]	; (80002d4 <systickInit+0x50>)
 800029c:	2200      	movs	r2, #0
 800029e:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;  // interrupt activated
 80002a0:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <systickInit+0x50>)
 80002a2:	681a      	ldr	r2, [r3, #0]
 80002a4:	4b0b      	ldr	r3, [pc, #44]	; (80002d4 <systickInit+0x50>)
 80002a6:	2102      	movs	r1, #2
 80002a8:	430a      	orrs	r2, r1
 80002aa:	601a      	str	r2, [r3, #0]
	SysTick->CTRL &= ~(1<<2);                   // Systick clock source = AHB/8
 80002ac:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <systickInit+0x50>)
 80002ae:	681a      	ldr	r2, [r3, #0]
 80002b0:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <systickInit+0x50>)
 80002b2:	2104      	movs	r1, #4
 80002b4:	438a      	bics	r2, r1
 80002b6:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(SysTick_IRQn);     			// NVIC activated
 80002b8:	2301      	movs	r3, #1
 80002ba:	425b      	negs	r3, r3
 80002bc:	0018      	movs	r0, r3
 80002be:	f7ff ff21 	bl	8000104 <__NVIC_EnableIRQ>
	NVIC_SetPriority (SysTick_IRQn,0);  		// Priority set
 80002c2:	2301      	movs	r3, #1
 80002c4:	425b      	negs	r3, r3
 80002c6:	2100      	movs	r1, #0
 80002c8:	0018      	movs	r0, r3
 80002ca:	f7ff ff35 	bl	8000138 <__NVIC_SetPriority>

}
 80002ce:	46c0      	nop			; (mov r8, r8)
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	e000e010 	.word	0xe000e010

080002d8 <GPIO_config>:

void GPIO_config(void) // GPIO configuration function
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0

	/* Setup PA1 as output */
	GPIOA->MODER &= ~(3U << 2*1);
 80002dc:	23a0      	movs	r3, #160	; 0xa0
 80002de:	05db      	lsls	r3, r3, #23
 80002e0:	681a      	ldr	r2, [r3, #0]
 80002e2:	23a0      	movs	r3, #160	; 0xa0
 80002e4:	05db      	lsls	r3, r3, #23
 80002e6:	210c      	movs	r1, #12
 80002e8:	438a      	bics	r2, r1
 80002ea:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (1U << 2*1);
 80002ec:	23a0      	movs	r3, #160	; 0xa0
 80002ee:	05db      	lsls	r3, r3, #23
 80002f0:	681a      	ldr	r2, [r3, #0]
 80002f2:	23a0      	movs	r3, #160	; 0xa0
 80002f4:	05db      	lsls	r3, r3, #23
 80002f6:	2104      	movs	r1, #4
 80002f8:	430a      	orrs	r2, r1
 80002fa:	601a      	str	r2, [r3, #0]
	/* Setup PA4 as output */
	GPIOA->MODER &= ~(3U << 2*4);
 80002fc:	23a0      	movs	r3, #160	; 0xa0
 80002fe:	05db      	lsls	r3, r3, #23
 8000300:	681a      	ldr	r2, [r3, #0]
 8000302:	23a0      	movs	r3, #160	; 0xa0
 8000304:	05db      	lsls	r3, r3, #23
 8000306:	494d      	ldr	r1, [pc, #308]	; (800043c <GPIO_config+0x164>)
 8000308:	400a      	ands	r2, r1
 800030a:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (1U << 2*4);
 800030c:	23a0      	movs	r3, #160	; 0xa0
 800030e:	05db      	lsls	r3, r3, #23
 8000310:	681a      	ldr	r2, [r3, #0]
 8000312:	23a0      	movs	r3, #160	; 0xa0
 8000314:	05db      	lsls	r3, r3, #23
 8000316:	2180      	movs	r1, #128	; 0x80
 8000318:	0049      	lsls	r1, r1, #1
 800031a:	430a      	orrs	r2, r1
 800031c:	601a      	str	r2, [r3, #0]
	/* Setup PA5 as output */
	GPIOA->MODER &= ~(3U << 2*5);
 800031e:	23a0      	movs	r3, #160	; 0xa0
 8000320:	05db      	lsls	r3, r3, #23
 8000322:	681a      	ldr	r2, [r3, #0]
 8000324:	23a0      	movs	r3, #160	; 0xa0
 8000326:	05db      	lsls	r3, r3, #23
 8000328:	4945      	ldr	r1, [pc, #276]	; (8000440 <GPIO_config+0x168>)
 800032a:	400a      	ands	r2, r1
 800032c:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (1U << 2*5);
 800032e:	23a0      	movs	r3, #160	; 0xa0
 8000330:	05db      	lsls	r3, r3, #23
 8000332:	681a      	ldr	r2, [r3, #0]
 8000334:	23a0      	movs	r3, #160	; 0xa0
 8000336:	05db      	lsls	r3, r3, #23
 8000338:	2180      	movs	r1, #128	; 0x80
 800033a:	00c9      	lsls	r1, r1, #3
 800033c:	430a      	orrs	r2, r1
 800033e:	601a      	str	r2, [r3, #0]
	/* Setup PA6 as output */
	GPIOA->MODER &= ~(3U << 2*6);
 8000340:	23a0      	movs	r3, #160	; 0xa0
 8000342:	05db      	lsls	r3, r3, #23
 8000344:	681a      	ldr	r2, [r3, #0]
 8000346:	23a0      	movs	r3, #160	; 0xa0
 8000348:	05db      	lsls	r3, r3, #23
 800034a:	493e      	ldr	r1, [pc, #248]	; (8000444 <GPIO_config+0x16c>)
 800034c:	400a      	ands	r2, r1
 800034e:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (1U << 2*6);
 8000350:	23a0      	movs	r3, #160	; 0xa0
 8000352:	05db      	lsls	r3, r3, #23
 8000354:	681a      	ldr	r2, [r3, #0]
 8000356:	23a0      	movs	r3, #160	; 0xa0
 8000358:	05db      	lsls	r3, r3, #23
 800035a:	2180      	movs	r1, #128	; 0x80
 800035c:	0149      	lsls	r1, r1, #5
 800035e:	430a      	orrs	r2, r1
 8000360:	601a      	str	r2, [r3, #0]


	/* Setup PB0 as output */
	GPIOB->MODER &= ~(3U << 2*0);
 8000362:	4b39      	ldr	r3, [pc, #228]	; (8000448 <GPIO_config+0x170>)
 8000364:	681a      	ldr	r2, [r3, #0]
 8000366:	4b38      	ldr	r3, [pc, #224]	; (8000448 <GPIO_config+0x170>)
 8000368:	2103      	movs	r1, #3
 800036a:	438a      	bics	r2, r1
 800036c:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (1U << 2*0);
 800036e:	4b36      	ldr	r3, [pc, #216]	; (8000448 <GPIO_config+0x170>)
 8000370:	681a      	ldr	r2, [r3, #0]
 8000372:	4b35      	ldr	r3, [pc, #212]	; (8000448 <GPIO_config+0x170>)
 8000374:	2101      	movs	r1, #1
 8000376:	430a      	orrs	r2, r1
 8000378:	601a      	str	r2, [r3, #0]
	/* Setup PB1 as output */
	GPIOB->MODER &= ~(3U << 2*1);
 800037a:	4b33      	ldr	r3, [pc, #204]	; (8000448 <GPIO_config+0x170>)
 800037c:	681a      	ldr	r2, [r3, #0]
 800037e:	4b32      	ldr	r3, [pc, #200]	; (8000448 <GPIO_config+0x170>)
 8000380:	210c      	movs	r1, #12
 8000382:	438a      	bics	r2, r1
 8000384:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (1U << 2*1);
 8000386:	4b30      	ldr	r3, [pc, #192]	; (8000448 <GPIO_config+0x170>)
 8000388:	681a      	ldr	r2, [r3, #0]
 800038a:	4b2f      	ldr	r3, [pc, #188]	; (8000448 <GPIO_config+0x170>)
 800038c:	2104      	movs	r1, #4
 800038e:	430a      	orrs	r2, r1
 8000390:	601a      	str	r2, [r3, #0]
	/* Setup PB2 as output */
	GPIOB->MODER &= ~(3U << 2*2);
 8000392:	4b2d      	ldr	r3, [pc, #180]	; (8000448 <GPIO_config+0x170>)
 8000394:	681a      	ldr	r2, [r3, #0]
 8000396:	4b2c      	ldr	r3, [pc, #176]	; (8000448 <GPIO_config+0x170>)
 8000398:	2130      	movs	r1, #48	; 0x30
 800039a:	438a      	bics	r2, r1
 800039c:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (1U << 2*2);
 800039e:	4b2a      	ldr	r3, [pc, #168]	; (8000448 <GPIO_config+0x170>)
 80003a0:	681a      	ldr	r2, [r3, #0]
 80003a2:	4b29      	ldr	r3, [pc, #164]	; (8000448 <GPIO_config+0x170>)
 80003a4:	2110      	movs	r1, #16
 80003a6:	430a      	orrs	r2, r1
 80003a8:	601a      	str	r2, [r3, #0]
	/* Setup PB3 as input */
	GPIOB->MODER &= ~(3U << 2*3);
 80003aa:	4b27      	ldr	r3, [pc, #156]	; (8000448 <GPIO_config+0x170>)
 80003ac:	681a      	ldr	r2, [r3, #0]
 80003ae:	4b26      	ldr	r3, [pc, #152]	; (8000448 <GPIO_config+0x170>)
 80003b0:	21c0      	movs	r1, #192	; 0xc0
 80003b2:	438a      	bics	r2, r1
 80003b4:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (1U << 2*3);
 80003b6:	4b24      	ldr	r3, [pc, #144]	; (8000448 <GPIO_config+0x170>)
 80003b8:	681a      	ldr	r2, [r3, #0]
 80003ba:	4b23      	ldr	r3, [pc, #140]	; (8000448 <GPIO_config+0x170>)
 80003bc:	2140      	movs	r1, #64	; 0x40
 80003be:	430a      	orrs	r2, r1
 80003c0:	601a      	str	r2, [r3, #0]
	/* Setup PB4 as output */
	GPIOB->MODER &= ~(3U << 2*4);
 80003c2:	4b21      	ldr	r3, [pc, #132]	; (8000448 <GPIO_config+0x170>)
 80003c4:	681a      	ldr	r2, [r3, #0]
 80003c6:	4b20      	ldr	r3, [pc, #128]	; (8000448 <GPIO_config+0x170>)
 80003c8:	491c      	ldr	r1, [pc, #112]	; (800043c <GPIO_config+0x164>)
 80003ca:	400a      	ands	r2, r1
 80003cc:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (1U << 2*4);
 80003ce:	4b1e      	ldr	r3, [pc, #120]	; (8000448 <GPIO_config+0x170>)
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	4b1d      	ldr	r3, [pc, #116]	; (8000448 <GPIO_config+0x170>)
 80003d4:	2180      	movs	r1, #128	; 0x80
 80003d6:	0049      	lsls	r1, r1, #1
 80003d8:	430a      	orrs	r2, r1
 80003da:	601a      	str	r2, [r3, #0]
	/* Setup PB5 as output */
	GPIOB->MODER &= ~(3U << 2*5);
 80003dc:	4b1a      	ldr	r3, [pc, #104]	; (8000448 <GPIO_config+0x170>)
 80003de:	681a      	ldr	r2, [r3, #0]
 80003e0:	4b19      	ldr	r3, [pc, #100]	; (8000448 <GPIO_config+0x170>)
 80003e2:	4917      	ldr	r1, [pc, #92]	; (8000440 <GPIO_config+0x168>)
 80003e4:	400a      	ands	r2, r1
 80003e6:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (1U << 2*5);
 80003e8:	4b17      	ldr	r3, [pc, #92]	; (8000448 <GPIO_config+0x170>)
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	4b16      	ldr	r3, [pc, #88]	; (8000448 <GPIO_config+0x170>)
 80003ee:	2180      	movs	r1, #128	; 0x80
 80003f0:	00c9      	lsls	r1, r1, #3
 80003f2:	430a      	orrs	r2, r1
 80003f4:	601a      	str	r2, [r3, #0]
	/* Setup PB6 as output */
	GPIOB->MODER &= ~(3U << 2*6);
 80003f6:	4b14      	ldr	r3, [pc, #80]	; (8000448 <GPIO_config+0x170>)
 80003f8:	681a      	ldr	r2, [r3, #0]
 80003fa:	4b13      	ldr	r3, [pc, #76]	; (8000448 <GPIO_config+0x170>)
 80003fc:	4911      	ldr	r1, [pc, #68]	; (8000444 <GPIO_config+0x16c>)
 80003fe:	400a      	ands	r2, r1
 8000400:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (1U << 2*6);
 8000402:	4b11      	ldr	r3, [pc, #68]	; (8000448 <GPIO_config+0x170>)
 8000404:	681a      	ldr	r2, [r3, #0]
 8000406:	4b10      	ldr	r3, [pc, #64]	; (8000448 <GPIO_config+0x170>)
 8000408:	2180      	movs	r1, #128	; 0x80
 800040a:	0149      	lsls	r1, r1, #5
 800040c:	430a      	orrs	r2, r1
 800040e:	601a      	str	r2, [r3, #0]
	/* Setup PB8 as input */
	GPIOB->MODER &= ~(3U << 2*8);
 8000410:	4b0d      	ldr	r3, [pc, #52]	; (8000448 <GPIO_config+0x170>)
 8000412:	681a      	ldr	r2, [r3, #0]
 8000414:	4b0c      	ldr	r3, [pc, #48]	; (8000448 <GPIO_config+0x170>)
 8000416:	490d      	ldr	r1, [pc, #52]	; (800044c <GPIO_config+0x174>)
 8000418:	400a      	ands	r2, r1
 800041a:	601a      	str	r2, [r3, #0]
	/*Setup PC6 as output */
    GPIOC->MODER &= ~(3U << 2*6);
 800041c:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <GPIO_config+0x178>)
 800041e:	681a      	ldr	r2, [r3, #0]
 8000420:	4b0b      	ldr	r3, [pc, #44]	; (8000450 <GPIO_config+0x178>)
 8000422:	4908      	ldr	r1, [pc, #32]	; (8000444 <GPIO_config+0x16c>)
 8000424:	400a      	ands	r2, r1
 8000426:	601a      	str	r2, [r3, #0]
    GPIOC->MODER |= (1U << 2*6);
 8000428:	4b09      	ldr	r3, [pc, #36]	; (8000450 <GPIO_config+0x178>)
 800042a:	681a      	ldr	r2, [r3, #0]
 800042c:	4b08      	ldr	r3, [pc, #32]	; (8000450 <GPIO_config+0x178>)
 800042e:	2180      	movs	r1, #128	; 0x80
 8000430:	0149      	lsls	r1, r1, #5
 8000432:	430a      	orrs	r2, r1
 8000434:	601a      	str	r2, [r3, #0]


}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	fffffcff 	.word	0xfffffcff
 8000440:	fffff3ff 	.word	0xfffff3ff
 8000444:	ffffcfff 	.word	0xffffcfff
 8000448:	50000400 	.word	0x50000400
 800044c:	fffcffff 	.word	0xfffcffff
 8000450:	50000800 	.word	0x50000800

08000454 <led4>:


void led4(int a)    // LED4 number displayer
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b084      	sub	sp, #16
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
	int t1 = 100;
 800045c:	2364      	movs	r3, #100	; 0x64
 800045e:	60fb      	str	r3, [r7, #12]
	GPIOA->ODR &= (0x00);
 8000460:	23a0      	movs	r3, #160	; 0xa0
 8000462:	05db      	lsls	r3, r3, #23
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	23a0      	movs	r3, #160	; 0xa0
 8000468:	05db      	lsls	r3, r3, #23
 800046a:	2200      	movs	r2, #0
 800046c:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= (0x40); //D4 active
 800046e:	23a0      	movs	r3, #160	; 0xa0
 8000470:	05db      	lsls	r3, r3, #23
 8000472:	695a      	ldr	r2, [r3, #20]
 8000474:	23a0      	movs	r3, #160	; 0xa0
 8000476:	05db      	lsls	r3, r3, #23
 8000478:	2140      	movs	r1, #64	; 0x40
 800047a:	430a      	orrs	r2, r1
 800047c:	615a      	str	r2, [r3, #20]

	switch (a) {
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	2b09      	cmp	r3, #9
 8000482:	d837      	bhi.n	80004f4 <led4+0xa0>
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	009a      	lsls	r2, r3, #2
 8000488:	4b1c      	ldr	r3, [pc, #112]	; (80004fc <led4+0xa8>)
 800048a:	18d3      	adds	r3, r2, r3
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	469f      	mov	pc, r3
		case 0:
			num_zero(t1);
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	0018      	movs	r0, r3
 8000494:	f000 f936 	bl	8000704 <num_zero>
			break;
 8000498:	e02c      	b.n	80004f4 <led4+0xa0>

		case 1:
			num_one(t1);
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	0018      	movs	r0, r3
 800049e:	f000 f947 	bl	8000730 <num_one>
			break;
 80004a2:	e027      	b.n	80004f4 <led4+0xa0>

		case 2:
			num_two(t1);
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	0018      	movs	r0, r3
 80004a8:	f000 f958 	bl	800075c <num_two>
			break;
 80004ac:	e022      	b.n	80004f4 <led4+0xa0>

		case 3:
			num_three(t1);
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	0018      	movs	r0, r3
 80004b2:	f000 f969 	bl	8000788 <num_three>
			break;
 80004b6:	e01d      	b.n	80004f4 <led4+0xa0>

		case 4:
			num_four(t1);
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	0018      	movs	r0, r3
 80004bc:	f000 f97a 	bl	80007b4 <num_four>
			break;
 80004c0:	e018      	b.n	80004f4 <led4+0xa0>

		case 5:
			num_five(t1);
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	0018      	movs	r0, r3
 80004c6:	f000 f98b 	bl	80007e0 <num_five>
			break;
 80004ca:	e013      	b.n	80004f4 <led4+0xa0>

		case 6:
			num_six(t1);
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	0018      	movs	r0, r3
 80004d0:	f000 f99c 	bl	800080c <num_six>
			break;
 80004d4:	e00e      	b.n	80004f4 <led4+0xa0>

		case 7:
			num_seven(t1);
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	0018      	movs	r0, r3
 80004da:	f000 f9ad 	bl	8000838 <num_seven>
			break;
 80004de:	e009      	b.n	80004f4 <led4+0xa0>

		case 8:
			num_eight(t1);
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	0018      	movs	r0, r3
 80004e4:	f000 f9be 	bl	8000864 <num_eight>
			break;
 80004e8:	e004      	b.n	80004f4 <led4+0xa0>

		case 9:
			num_nine(t1);
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	0018      	movs	r0, r3
 80004ee:	f000 f9d1 	bl	8000894 <num_nine>
			break;
 80004f2:	46c0      	nop			; (mov r8, r8)
	}
}
 80004f4:	46c0      	nop			; (mov r8, r8)
 80004f6:	46bd      	mov	sp, r7
 80004f8:	b004      	add	sp, #16
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	08000c00 	.word	0x08000c00

08000500 <led3>:


void led3(int b) // LED3 number displayer
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	int t1 = 100;
 8000508:	2364      	movs	r3, #100	; 0x64
 800050a:	60fb      	str	r3, [r7, #12]
	GPIOA->ODR &= (0x00);
 800050c:	23a0      	movs	r3, #160	; 0xa0
 800050e:	05db      	lsls	r3, r3, #23
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	23a0      	movs	r3, #160	; 0xa0
 8000514:	05db      	lsls	r3, r3, #23
 8000516:	2200      	movs	r2, #0
 8000518:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= (0x20); //D3 active
 800051a:	23a0      	movs	r3, #160	; 0xa0
 800051c:	05db      	lsls	r3, r3, #23
 800051e:	695a      	ldr	r2, [r3, #20]
 8000520:	23a0      	movs	r3, #160	; 0xa0
 8000522:	05db      	lsls	r3, r3, #23
 8000524:	2120      	movs	r1, #32
 8000526:	430a      	orrs	r2, r1
 8000528:	615a      	str	r2, [r3, #20]

	switch (b) {
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2b09      	cmp	r3, #9
 800052e:	d837      	bhi.n	80005a0 <led3+0xa0>
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	009a      	lsls	r2, r3, #2
 8000534:	4b1c      	ldr	r3, [pc, #112]	; (80005a8 <led3+0xa8>)
 8000536:	18d3      	adds	r3, r2, r3
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	469f      	mov	pc, r3
		case 0:
			num_zero(t1);
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	0018      	movs	r0, r3
 8000540:	f000 f8e0 	bl	8000704 <num_zero>
			break;
 8000544:	e02c      	b.n	80005a0 <led3+0xa0>

		case 1:
			num_one(t1);
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	0018      	movs	r0, r3
 800054a:	f000 f8f1 	bl	8000730 <num_one>
			break;
 800054e:	e027      	b.n	80005a0 <led3+0xa0>

		case 2:
			num_two(t1);
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	0018      	movs	r0, r3
 8000554:	f000 f902 	bl	800075c <num_two>
			break;
 8000558:	e022      	b.n	80005a0 <led3+0xa0>

		case 3:
			num_three(t1);
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	0018      	movs	r0, r3
 800055e:	f000 f913 	bl	8000788 <num_three>
			break;
 8000562:	e01d      	b.n	80005a0 <led3+0xa0>

		case 4:
			num_four(t1);
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	0018      	movs	r0, r3
 8000568:	f000 f924 	bl	80007b4 <num_four>
			break;
 800056c:	e018      	b.n	80005a0 <led3+0xa0>

		case 5:
			num_five(t1);
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	0018      	movs	r0, r3
 8000572:	f000 f935 	bl	80007e0 <num_five>
			break;
 8000576:	e013      	b.n	80005a0 <led3+0xa0>

		case 6:
			num_six(t1);
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	0018      	movs	r0, r3
 800057c:	f000 f946 	bl	800080c <num_six>
			break;
 8000580:	e00e      	b.n	80005a0 <led3+0xa0>

		case 7:
			num_seven(t1);
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	0018      	movs	r0, r3
 8000586:	f000 f957 	bl	8000838 <num_seven>
			break;
 800058a:	e009      	b.n	80005a0 <led3+0xa0>

		case 8:
			num_eight(t1);
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	0018      	movs	r0, r3
 8000590:	f000 f968 	bl	8000864 <num_eight>
			break;
 8000594:	e004      	b.n	80005a0 <led3+0xa0>

		case 9:
			num_nine(t1);
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	0018      	movs	r0, r3
 800059a:	f000 f97b 	bl	8000894 <num_nine>
			break;
 800059e:	46c0      	nop			; (mov r8, r8)
	}
}
 80005a0:	46c0      	nop			; (mov r8, r8)
 80005a2:	46bd      	mov	sp, r7
 80005a4:	b004      	add	sp, #16
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	08000c28 	.word	0x08000c28

080005ac <led2>:

void led2(int c) // LED2 number displayer
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	int t1 = 100;
 80005b4:	2364      	movs	r3, #100	; 0x64
 80005b6:	60fb      	str	r3, [r7, #12]
	GPIOA->ODR &= (0x00);
 80005b8:	23a0      	movs	r3, #160	; 0xa0
 80005ba:	05db      	lsls	r3, r3, #23
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	23a0      	movs	r3, #160	; 0xa0
 80005c0:	05db      	lsls	r3, r3, #23
 80005c2:	2200      	movs	r2, #0
 80005c4:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= (0x10); //D2 active
 80005c6:	23a0      	movs	r3, #160	; 0xa0
 80005c8:	05db      	lsls	r3, r3, #23
 80005ca:	695a      	ldr	r2, [r3, #20]
 80005cc:	23a0      	movs	r3, #160	; 0xa0
 80005ce:	05db      	lsls	r3, r3, #23
 80005d0:	2110      	movs	r1, #16
 80005d2:	430a      	orrs	r2, r1
 80005d4:	615a      	str	r2, [r3, #20]

	switch (c) {
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2b09      	cmp	r3, #9
 80005da:	d837      	bhi.n	800064c <led2+0xa0>
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	009a      	lsls	r2, r3, #2
 80005e0:	4b1c      	ldr	r3, [pc, #112]	; (8000654 <led2+0xa8>)
 80005e2:	18d3      	adds	r3, r2, r3
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	469f      	mov	pc, r3
		case 0:
			num_zero(t1);
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	0018      	movs	r0, r3
 80005ec:	f000 f88a 	bl	8000704 <num_zero>
			break;
 80005f0:	e02c      	b.n	800064c <led2+0xa0>

		case 1:
			num_one(t1);
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	0018      	movs	r0, r3
 80005f6:	f000 f89b 	bl	8000730 <num_one>
			break;
 80005fa:	e027      	b.n	800064c <led2+0xa0>

		case 2:
			num_two(t1);
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	0018      	movs	r0, r3
 8000600:	f000 f8ac 	bl	800075c <num_two>
			break;
 8000604:	e022      	b.n	800064c <led2+0xa0>

		case 3:
			num_three(t1);
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	0018      	movs	r0, r3
 800060a:	f000 f8bd 	bl	8000788 <num_three>
			break;
 800060e:	e01d      	b.n	800064c <led2+0xa0>

		case 4:
			num_four(t1);
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	0018      	movs	r0, r3
 8000614:	f000 f8ce 	bl	80007b4 <num_four>
			break;
 8000618:	e018      	b.n	800064c <led2+0xa0>

		case 5:
			num_five(t1);
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	0018      	movs	r0, r3
 800061e:	f000 f8df 	bl	80007e0 <num_five>
			break;
 8000622:	e013      	b.n	800064c <led2+0xa0>

		case 6:
			num_six(t1);
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	0018      	movs	r0, r3
 8000628:	f000 f8f0 	bl	800080c <num_six>
			break;
 800062c:	e00e      	b.n	800064c <led2+0xa0>

		case 7:
			num_seven(t1);
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	0018      	movs	r0, r3
 8000632:	f000 f901 	bl	8000838 <num_seven>
			break;
 8000636:	e009      	b.n	800064c <led2+0xa0>

		case 8:
			num_eight(t1);
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	0018      	movs	r0, r3
 800063c:	f000 f912 	bl	8000864 <num_eight>
			break;
 8000640:	e004      	b.n	800064c <led2+0xa0>

		case 9:
			num_nine(t1);
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	0018      	movs	r0, r3
 8000646:	f000 f925 	bl	8000894 <num_nine>
			break;
 800064a:	46c0      	nop			; (mov r8, r8)
	}
}
 800064c:	46c0      	nop			; (mov r8, r8)
 800064e:	46bd      	mov	sp, r7
 8000650:	b004      	add	sp, #16
 8000652:	bd80      	pop	{r7, pc}
 8000654:	08000c50 	.word	0x08000c50

08000658 <led1>:

void led1(int d) // LED1 number displayer
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	int t1 = 100;
 8000660:	2364      	movs	r3, #100	; 0x64
 8000662:	60fb      	str	r3, [r7, #12]
	GPIOA->ODR &= (0x00);
 8000664:	23a0      	movs	r3, #160	; 0xa0
 8000666:	05db      	lsls	r3, r3, #23
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	23a0      	movs	r3, #160	; 0xa0
 800066c:	05db      	lsls	r3, r3, #23
 800066e:	2200      	movs	r2, #0
 8000670:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= (0x02); //D1 active
 8000672:	23a0      	movs	r3, #160	; 0xa0
 8000674:	05db      	lsls	r3, r3, #23
 8000676:	695a      	ldr	r2, [r3, #20]
 8000678:	23a0      	movs	r3, #160	; 0xa0
 800067a:	05db      	lsls	r3, r3, #23
 800067c:	2102      	movs	r1, #2
 800067e:	430a      	orrs	r2, r1
 8000680:	615a      	str	r2, [r3, #20]

	switch (d) {
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2b09      	cmp	r3, #9
 8000686:	d837      	bhi.n	80006f8 <led1+0xa0>
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	009a      	lsls	r2, r3, #2
 800068c:	4b1c      	ldr	r3, [pc, #112]	; (8000700 <led1+0xa8>)
 800068e:	18d3      	adds	r3, r2, r3
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	469f      	mov	pc, r3
		case 0:
			num_zero(t1);
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	0018      	movs	r0, r3
 8000698:	f000 f834 	bl	8000704 <num_zero>
			break;
 800069c:	e02c      	b.n	80006f8 <led1+0xa0>

		case 1:
			num_one(t1);
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	0018      	movs	r0, r3
 80006a2:	f000 f845 	bl	8000730 <num_one>
			break;
 80006a6:	e027      	b.n	80006f8 <led1+0xa0>

		case 2:
			num_two(t1);
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	0018      	movs	r0, r3
 80006ac:	f000 f856 	bl	800075c <num_two>
			break;
 80006b0:	e022      	b.n	80006f8 <led1+0xa0>

		case 3:
			num_three(t1);
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	0018      	movs	r0, r3
 80006b6:	f000 f867 	bl	8000788 <num_three>
			break;
 80006ba:	e01d      	b.n	80006f8 <led1+0xa0>

		case 4:
			num_four(t1);
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	0018      	movs	r0, r3
 80006c0:	f000 f878 	bl	80007b4 <num_four>
			break;
 80006c4:	e018      	b.n	80006f8 <led1+0xa0>

		case 5:
			num_five(t1);
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	0018      	movs	r0, r3
 80006ca:	f000 f889 	bl	80007e0 <num_five>
			break;
 80006ce:	e013      	b.n	80006f8 <led1+0xa0>

		case 6:
			num_six(t1);
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	0018      	movs	r0, r3
 80006d4:	f000 f89a 	bl	800080c <num_six>
			break;
 80006d8:	e00e      	b.n	80006f8 <led1+0xa0>

		case 7:
			num_seven(t1);
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	0018      	movs	r0, r3
 80006de:	f000 f8ab 	bl	8000838 <num_seven>
			break;
 80006e2:	e009      	b.n	80006f8 <led1+0xa0>

		case 8:
			num_eight(t1);
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 f8bc 	bl	8000864 <num_eight>
			break;
 80006ec:	e004      	b.n	80006f8 <led1+0xa0>

		case 9:
			num_nine(t1);
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	0018      	movs	r0, r3
 80006f2:	f000 f8cf 	bl	8000894 <num_nine>
			break;
 80006f6:	46c0      	nop			; (mov r8, r8)
	}
}
 80006f8:	46c0      	nop			; (mov r8, r8)
 80006fa:	46bd      	mov	sp, r7
 80006fc:	b004      	add	sp, #16
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	08000c78 	.word	0x08000c78

08000704 <num_zero>:

/* All number display functions */
void num_zero(int t) // 0 Display
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
    GPIOB->ODR &= (0x00);
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <num_zero+0x28>)
 800070e:	695b      	ldr	r3, [r3, #20]
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <num_zero+0x28>)
 8000712:	2200      	movs	r2, #0
 8000714:	615a      	str	r2, [r3, #20]
    GPIOB->ODR |= ~(0x3F);
 8000716:	4b05      	ldr	r3, [pc, #20]	; (800072c <num_zero+0x28>)
 8000718:	695a      	ldr	r2, [r3, #20]
 800071a:	4b04      	ldr	r3, [pc, #16]	; (800072c <num_zero+0x28>)
 800071c:	2140      	movs	r1, #64	; 0x40
 800071e:	4249      	negs	r1, r1
 8000720:	430a      	orrs	r2, r1
 8000722:	615a      	str	r2, [r3, #20]
}
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	b002      	add	sp, #8
 800072a:	bd80      	pop	{r7, pc}
 800072c:	50000400 	.word	0x50000400

08000730 <num_one>:

void num_one(int t) // 1 Display
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
    GPIOB->ODR &= (0x00);
 8000738:	4b07      	ldr	r3, [pc, #28]	; (8000758 <num_one+0x28>)
 800073a:	695b      	ldr	r3, [r3, #20]
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <num_one+0x28>)
 800073e:	2200      	movs	r2, #0
 8000740:	615a      	str	r2, [r3, #20]
    GPIOB->ODR |= ~(0x06);
 8000742:	4b05      	ldr	r3, [pc, #20]	; (8000758 <num_one+0x28>)
 8000744:	695a      	ldr	r2, [r3, #20]
 8000746:	4b04      	ldr	r3, [pc, #16]	; (8000758 <num_one+0x28>)
 8000748:	2107      	movs	r1, #7
 800074a:	4249      	negs	r1, r1
 800074c:	430a      	orrs	r2, r1
 800074e:	615a      	str	r2, [r3, #20]
}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	b002      	add	sp, #8
 8000756:	bd80      	pop	{r7, pc}
 8000758:	50000400 	.word	0x50000400

0800075c <num_two>:

void num_two(int t) // 2 Display
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
    GPIOB->ODR &= (0x00);
 8000764:	4b07      	ldr	r3, [pc, #28]	; (8000784 <num_two+0x28>)
 8000766:	695b      	ldr	r3, [r3, #20]
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <num_two+0x28>)
 800076a:	2200      	movs	r2, #0
 800076c:	615a      	str	r2, [r3, #20]
    GPIOB->ODR |= ~(0x5B);
 800076e:	4b05      	ldr	r3, [pc, #20]	; (8000784 <num_two+0x28>)
 8000770:	695a      	ldr	r2, [r3, #20]
 8000772:	4b04      	ldr	r3, [pc, #16]	; (8000784 <num_two+0x28>)
 8000774:	215c      	movs	r1, #92	; 0x5c
 8000776:	4249      	negs	r1, r1
 8000778:	430a      	orrs	r2, r1
 800077a:	615a      	str	r2, [r3, #20]
}
 800077c:	46c0      	nop			; (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	b002      	add	sp, #8
 8000782:	bd80      	pop	{r7, pc}
 8000784:	50000400 	.word	0x50000400

08000788 <num_three>:

void num_three(int t) // 3 Display
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
    GPIOB->ODR &= (0x00);
 8000790:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <num_three+0x28>)
 8000792:	695b      	ldr	r3, [r3, #20]
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <num_three+0x28>)
 8000796:	2200      	movs	r2, #0
 8000798:	615a      	str	r2, [r3, #20]
    GPIOB->ODR |= ~(0x4F);
 800079a:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <num_three+0x28>)
 800079c:	695a      	ldr	r2, [r3, #20]
 800079e:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <num_three+0x28>)
 80007a0:	2150      	movs	r1, #80	; 0x50
 80007a2:	4249      	negs	r1, r1
 80007a4:	430a      	orrs	r2, r1
 80007a6:	615a      	str	r2, [r3, #20]
}
 80007a8:	46c0      	nop			; (mov r8, r8)
 80007aa:	46bd      	mov	sp, r7
 80007ac:	b002      	add	sp, #8
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	50000400 	.word	0x50000400

080007b4 <num_four>:

void num_four(int t) // 4 Display
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
    GPIOB->ODR &= (0x00);
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <num_four+0x28>)
 80007be:	695b      	ldr	r3, [r3, #20]
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <num_four+0x28>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	615a      	str	r2, [r3, #20]
    GPIOB->ODR |= ~(0x66);
 80007c6:	4b05      	ldr	r3, [pc, #20]	; (80007dc <num_four+0x28>)
 80007c8:	695a      	ldr	r2, [r3, #20]
 80007ca:	4b04      	ldr	r3, [pc, #16]	; (80007dc <num_four+0x28>)
 80007cc:	2167      	movs	r1, #103	; 0x67
 80007ce:	4249      	negs	r1, r1
 80007d0:	430a      	orrs	r2, r1
 80007d2:	615a      	str	r2, [r3, #20]
}
 80007d4:	46c0      	nop			; (mov r8, r8)
 80007d6:	46bd      	mov	sp, r7
 80007d8:	b002      	add	sp, #8
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	50000400 	.word	0x50000400

080007e0 <num_five>:

void num_five(int t) // 5 Display
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
    GPIOB->ODR &= (0x00);
 80007e8:	4b07      	ldr	r3, [pc, #28]	; (8000808 <num_five+0x28>)
 80007ea:	695b      	ldr	r3, [r3, #20]
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <num_five+0x28>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	615a      	str	r2, [r3, #20]
    GPIOB->ODR |= ~(0x6D);
 80007f2:	4b05      	ldr	r3, [pc, #20]	; (8000808 <num_five+0x28>)
 80007f4:	695a      	ldr	r2, [r3, #20]
 80007f6:	4b04      	ldr	r3, [pc, #16]	; (8000808 <num_five+0x28>)
 80007f8:	216e      	movs	r1, #110	; 0x6e
 80007fa:	4249      	negs	r1, r1
 80007fc:	430a      	orrs	r2, r1
 80007fe:	615a      	str	r2, [r3, #20]
}
 8000800:	46c0      	nop			; (mov r8, r8)
 8000802:	46bd      	mov	sp, r7
 8000804:	b002      	add	sp, #8
 8000806:	bd80      	pop	{r7, pc}
 8000808:	50000400 	.word	0x50000400

0800080c <num_six>:

void num_six(int t) // 6 Display
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
    GPIOB->ODR &= (0x00);
 8000814:	4b07      	ldr	r3, [pc, #28]	; (8000834 <num_six+0x28>)
 8000816:	695b      	ldr	r3, [r3, #20]
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <num_six+0x28>)
 800081a:	2200      	movs	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
    GPIOB->ODR |= ~(0x7D);
 800081e:	4b05      	ldr	r3, [pc, #20]	; (8000834 <num_six+0x28>)
 8000820:	695a      	ldr	r2, [r3, #20]
 8000822:	4b04      	ldr	r3, [pc, #16]	; (8000834 <num_six+0x28>)
 8000824:	217e      	movs	r1, #126	; 0x7e
 8000826:	4249      	negs	r1, r1
 8000828:	430a      	orrs	r2, r1
 800082a:	615a      	str	r2, [r3, #20]
}
 800082c:	46c0      	nop			; (mov r8, r8)
 800082e:	46bd      	mov	sp, r7
 8000830:	b002      	add	sp, #8
 8000832:	bd80      	pop	{r7, pc}
 8000834:	50000400 	.word	0x50000400

08000838 <num_seven>:

void num_seven(int t) // 7 Display
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
    GPIOB->ODR &= (0x00);
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <num_seven+0x28>)
 8000842:	695b      	ldr	r3, [r3, #20]
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <num_seven+0x28>)
 8000846:	2200      	movs	r2, #0
 8000848:	615a      	str	r2, [r3, #20]
    GPIOB->ODR |= ~(0x07);
 800084a:	4b05      	ldr	r3, [pc, #20]	; (8000860 <num_seven+0x28>)
 800084c:	695a      	ldr	r2, [r3, #20]
 800084e:	4b04      	ldr	r3, [pc, #16]	; (8000860 <num_seven+0x28>)
 8000850:	2108      	movs	r1, #8
 8000852:	4249      	negs	r1, r1
 8000854:	430a      	orrs	r2, r1
 8000856:	615a      	str	r2, [r3, #20]
}
 8000858:	46c0      	nop			; (mov r8, r8)
 800085a:	46bd      	mov	sp, r7
 800085c:	b002      	add	sp, #8
 800085e:	bd80      	pop	{r7, pc}
 8000860:	50000400 	.word	0x50000400

08000864 <num_eight>:

void num_eight(int t) // 8 Display
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
    GPIOB->ODR &= (0x00);
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <num_eight+0x28>)
 800086e:	695b      	ldr	r3, [r3, #20]
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <num_eight+0x28>)
 8000872:	2200      	movs	r2, #0
 8000874:	615a      	str	r2, [r3, #20]
    GPIOB->ODR |= ~(0xFF);
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <num_eight+0x28>)
 8000878:	695a      	ldr	r2, [r3, #20]
 800087a:	4b04      	ldr	r3, [pc, #16]	; (800088c <num_eight+0x28>)
 800087c:	4904      	ldr	r1, [pc, #16]	; (8000890 <num_eight+0x2c>)
 800087e:	430a      	orrs	r2, r1
 8000880:	615a      	str	r2, [r3, #20]
}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	b002      	add	sp, #8
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	50000400 	.word	0x50000400
 8000890:	ffffff00 	.word	0xffffff00

08000894 <num_nine>:

void num_nine(int t) // 9 Display
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
    GPIOB->ODR &= (0x00);
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <num_nine+0x28>)
 800089e:	695b      	ldr	r3, [r3, #20]
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <num_nine+0x28>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	615a      	str	r2, [r3, #20]
    GPIOB->ODR |= ~(0x6F);
 80008a6:	4b05      	ldr	r3, [pc, #20]	; (80008bc <num_nine+0x28>)
 80008a8:	695a      	ldr	r2, [r3, #20]
 80008aa:	4b04      	ldr	r3, [pc, #16]	; (80008bc <num_nine+0x28>)
 80008ac:	2170      	movs	r1, #112	; 0x70
 80008ae:	4249      	negs	r1, r1
 80008b0:	430a      	orrs	r2, r1
 80008b2:	615a      	str	r2, [r3, #20]
}
 80008b4:	46c0      	nop			; (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	b002      	add	sp, #8
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	50000400 	.word	0x50000400

080008c0 <action>:


void action(void) // algorithm main code
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
	offFinish_led();
 80008c4:	f000 f910 	bl	8000ae8 <offFinish_led>

    if (counter >= 1000)
 80008c8:	4b4d      	ldr	r3, [pc, #308]	; (8000a00 <action+0x140>)
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	23fa      	movs	r3, #250	; 0xfa
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	429a      	cmp	r2, r3
 80008d2:	db07      	blt.n	80008e4 <action+0x24>
    {
    	counter = 0;
 80008d4:	4b4a      	ldr	r3, [pc, #296]	; (8000a00 <action+0x140>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
    	digit4 = digit4 + 1;
 80008da:	4b4a      	ldr	r3, [pc, #296]	; (8000a04 <action+0x144>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	1c5a      	adds	r2, r3, #1
 80008e0:	4b48      	ldr	r3, [pc, #288]	; (8000a04 <action+0x144>)
 80008e2:	601a      	str	r2, [r3, #0]
    }

    if (digit4 == 10) //reset digit
 80008e4:	4b47      	ldr	r3, [pc, #284]	; (8000a04 <action+0x144>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b0a      	cmp	r3, #10
 80008ea:	d12b      	bne.n	8000944 <action+0x84>
    {
    	digit4 = 0;
 80008ec:	4b45      	ldr	r3, [pc, #276]	; (8000a04 <action+0x144>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
    	digit3 = digit3 + 1;
 80008f2:	4b45      	ldr	r3, [pc, #276]	; (8000a08 <action+0x148>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	1c5a      	adds	r2, r3, #1
 80008f8:	4b43      	ldr	r3, [pc, #268]	; (8000a08 <action+0x148>)
 80008fa:	601a      	str	r2, [r3, #0]
	    stop_ct = stop_ct + 1;
 80008fc:	4b43      	ldr	r3, [pc, #268]	; (8000a0c <action+0x14c>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	1c5a      	adds	r2, r3, #1
 8000902:	4b42      	ldr	r3, [pc, #264]	; (8000a0c <action+0x14c>)
 8000904:	601a      	str	r2, [r3, #0]


		if (digit3 == 10) //reset digit
 8000906:	4b40      	ldr	r3, [pc, #256]	; (8000a08 <action+0x148>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	2b0a      	cmp	r3, #10
 800090c:	d107      	bne.n	800091e <action+0x5e>
		{
			digit3 = 0;
 800090e:	4b3e      	ldr	r3, [pc, #248]	; (8000a08 <action+0x148>)
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
			digit2 = digit2 + 1;
 8000914:	4b3e      	ldr	r3, [pc, #248]	; (8000a10 <action+0x150>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	1c5a      	adds	r2, r3, #1
 800091a:	4b3d      	ldr	r3, [pc, #244]	; (8000a10 <action+0x150>)
 800091c:	601a      	str	r2, [r3, #0]
		}

		if (digit2 == 10) // reset digit
 800091e:	4b3c      	ldr	r3, [pc, #240]	; (8000a10 <action+0x150>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2b0a      	cmp	r3, #10
 8000924:	d107      	bne.n	8000936 <action+0x76>
		{
			digit2 = 0;
 8000926:	4b3a      	ldr	r3, [pc, #232]	; (8000a10 <action+0x150>)
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
			digit1 = digit1 + 1;
 800092c:	4b39      	ldr	r3, [pc, #228]	; (8000a14 <action+0x154>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	1c5a      	adds	r2, r3, #1
 8000932:	4b38      	ldr	r3, [pc, #224]	; (8000a14 <action+0x154>)
 8000934:	601a      	str	r2, [r3, #0]
		}


		if(digit1 == 10) //reset digit
 8000936:	4b37      	ldr	r3, [pc, #220]	; (8000a14 <action+0x154>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	2b0a      	cmp	r3, #10
 800093c:	d102      	bne.n	8000944 <action+0x84>
		{
			digit1 = 0;
 800093e:	4b35      	ldr	r3, [pc, #212]	; (8000a14 <action+0x154>)
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]

		}
	}

    /* Display the number */
    led1(digit1);
 8000944:	4b33      	ldr	r3, [pc, #204]	; (8000a14 <action+0x154>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	0018      	movs	r0, r3
 800094a:	f7ff fe85 	bl	8000658 <led1>
    delay_ms(1);
 800094e:	2001      	movs	r0, #1
 8000950:	f7ff fc82 	bl	8000258 <delay_ms>
    led2(digit2);
 8000954:	4b2e      	ldr	r3, [pc, #184]	; (8000a10 <action+0x150>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	0018      	movs	r0, r3
 800095a:	f7ff fe27 	bl	80005ac <led2>
    delay_ms(1);
 800095e:	2001      	movs	r0, #1
 8000960:	f7ff fc7a 	bl	8000258 <delay_ms>
    led3(digit3);
 8000964:	4b28      	ldr	r3, [pc, #160]	; (8000a08 <action+0x148>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	0018      	movs	r0, r3
 800096a:	f7ff fdc9 	bl	8000500 <led3>
    delay_ms(1);
 800096e:	2001      	movs	r0, #1
 8000970:	f7ff fc72 	bl	8000258 <delay_ms>
    led4(digit4);
 8000974:	4b23      	ldr	r3, [pc, #140]	; (8000a04 <action+0x144>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	0018      	movs	r0, r3
 800097a:	f7ff fd6b 	bl	8000454 <led4>
    delay_ms(1);
 800097e:	2001      	movs	r0, #1
 8000980:	f7ff fc6a 	bl	8000258 <delay_ms>
    counter = counter + 100;
 8000984:	4b1e      	ldr	r3, [pc, #120]	; (8000a00 <action+0x140>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	3364      	adds	r3, #100	; 0x64
 800098a:	001a      	movs	r2, r3
 800098c:	4b1c      	ldr	r3, [pc, #112]	; (8000a00 <action+0x140>)
 800098e:	601a      	str	r2, [r3, #0]
    flag = flag + 1;
 8000990:	4b21      	ldr	r3, [pc, #132]	; (8000a18 <action+0x158>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	1c5a      	adds	r2, r3, #1
 8000996:	4b20      	ldr	r3, [pc, #128]	; (8000a18 <action+0x158>)
 8000998:	601a      	str	r2, [r3, #0]


    if(flag == 99999) // last number holder
 800099a:	4b1f      	ldr	r3, [pc, #124]	; (8000a18 <action+0x158>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a1f      	ldr	r2, [pc, #124]	; (8000a1c <action+0x15c>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d12a      	bne.n	80009fa <action+0x13a>
    {
    	while(1)
    	{
    	    led1(digit1);
 80009a4:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <action+0x154>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	0018      	movs	r0, r3
 80009aa:	f7ff fe55 	bl	8000658 <led1>
    	    delay_ms(1);
 80009ae:	2001      	movs	r0, #1
 80009b0:	f7ff fc52 	bl	8000258 <delay_ms>
    	    led2(digit2);
 80009b4:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <action+0x150>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	0018      	movs	r0, r3
 80009ba:	f7ff fdf7 	bl	80005ac <led2>
    	    delay_ms(1);
 80009be:	2001      	movs	r0, #1
 80009c0:	f7ff fc4a 	bl	8000258 <delay_ms>
    	    led3(digit3);
 80009c4:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <action+0x148>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	0018      	movs	r0, r3
 80009ca:	f7ff fd99 	bl	8000500 <led3>
    	    delay_ms(1);
 80009ce:	2001      	movs	r0, #1
 80009d0:	f7ff fc42 	bl	8000258 <delay_ms>
    	    led4(digit4);
 80009d4:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <action+0x144>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	0018      	movs	r0, r3
 80009da:	f7ff fd3b 	bl	8000454 <led4>
    	    delay_ms(1);
 80009de:	2001      	movs	r0, #1
 80009e0:	f7ff fc3a 	bl	8000258 <delay_ms>
    	    flag = 0;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <action+0x158>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
    	    onFinish_led();
 80009ea:	f000 f86f 	bl	8000acc <onFinish_led>
    	    if(stop_ct == 0)
 80009ee:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <action+0x14c>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d000      	beq.n	80009f8 <action+0x138>
    	    led1(digit1);
 80009f6:	e7d5      	b.n	80009a4 <action+0xe4>
    	    	break;
 80009f8:	46c0      	nop			; (mov r8, r8)
    	}
    }


}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000030 	.word	0x20000030
 8000a04:	2000001c 	.word	0x2000001c
 8000a08:	20000020 	.word	0x20000020
 8000a0c:	20000034 	.word	0x20000034
 8000a10:	20000024 	.word	0x20000024
 8000a14:	20000028 	.word	0x20000028
 8000a18:	20000038 	.word	0x20000038
 8000a1c:	0001869f 	.word	0x0001869f

08000a20 <EXTI_config>:


void EXTI_config(void) // EXTI configuration function
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	 EXTI->EXTICR[2] |= (1U << 8*0); 	//PB8 EXTI
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <EXTI_config+0x44>)
 8000a26:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000a28:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <EXTI_config+0x44>)
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	430a      	orrs	r2, r1
 8000a2e:	669a      	str	r2, [r3, #104]	; 0x68
	 EXTI->RTSR1 |= (1U << 8); 			//Rising Edge PB8
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <EXTI_config+0x44>)
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <EXTI_config+0x44>)
 8000a36:	2180      	movs	r1, #128	; 0x80
 8000a38:	0049      	lsls	r1, r1, #1
 8000a3a:	430a      	orrs	r2, r1
 8000a3c:	601a      	str	r2, [r3, #0]
	 EXTI->IMR1 |= (1U << 8); 			//Mask for PB8
 8000a3e:	4a09      	ldr	r2, [pc, #36]	; (8000a64 <EXTI_config+0x44>)
 8000a40:	2380      	movs	r3, #128	; 0x80
 8000a42:	58d3      	ldr	r3, [r2, r3]
 8000a44:	4907      	ldr	r1, [pc, #28]	; (8000a64 <EXTI_config+0x44>)
 8000a46:	2280      	movs	r2, #128	; 0x80
 8000a48:	0052      	lsls	r2, r2, #1
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	2280      	movs	r2, #128	; 0x80
 8000a4e:	508b      	str	r3, [r1, r2]
	 NVIC_SetPriority(EXTI4_15_IRQn, 0);
 8000a50:	2100      	movs	r1, #0
 8000a52:	2007      	movs	r0, #7
 8000a54:	f7ff fb70 	bl	8000138 <__NVIC_SetPriority>
	 NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000a58:	2007      	movs	r0, #7
 8000a5a:	f7ff fb53 	bl	8000104 <__NVIC_EnableIRQ>
}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40021800 	.word	0x40021800

08000a68 <EXTI4_15_IRQHandler>:


void EXTI4_15_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	/* Reset the System */
	digit1 = 0;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <EXTI4_15_IRQHandler+0x44>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
	digit2 = 0;
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <EXTI4_15_IRQHandler+0x48>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
	digit3 = 0;
 8000a78:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <EXTI4_15_IRQHandler+0x4c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
	digit4 = 0;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <EXTI4_15_IRQHandler+0x50>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
	counter = 0;
 8000a84:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <EXTI4_15_IRQHandler+0x54>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
	stop_ct = 0;
 8000a8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <EXTI4_15_IRQHandler+0x58>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
	flag = 0;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <EXTI4_15_IRQHandler+0x5c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]

	EXTI->RPR1 |= (1U << 8);
 8000a96:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <EXTI4_15_IRQHandler+0x60>)
 8000a98:	68da      	ldr	r2, [r3, #12]
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <EXTI4_15_IRQHandler+0x60>)
 8000a9c:	2180      	movs	r1, #128	; 0x80
 8000a9e:	0049      	lsls	r1, r1, #1
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	60da      	str	r2, [r3, #12]
}
 8000aa4:	46c0      	nop			; (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	20000028 	.word	0x20000028
 8000ab0:	20000024 	.word	0x20000024
 8000ab4:	20000020 	.word	0x20000020
 8000ab8:	2000001c 	.word	0x2000001c
 8000abc:	20000030 	.word	0x20000030
 8000ac0:	20000034 	.word	0x20000034
 8000ac4:	20000038 	.word	0x20000038
 8000ac8:	40021800 	.word	0x40021800

08000acc <onFinish_led>:


void onFinish_led(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
    GPIOC->ODR |= (1U << 6); 			// PC6 Board LED On
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <onFinish_led+0x18>)
 8000ad2:	695a      	ldr	r2, [r3, #20]
 8000ad4:	4b03      	ldr	r3, [pc, #12]	; (8000ae4 <onFinish_led+0x18>)
 8000ad6:	2140      	movs	r1, #64	; 0x40
 8000ad8:	430a      	orrs	r2, r1
 8000ada:	615a      	str	r2, [r3, #20]
}
 8000adc:	46c0      	nop			; (mov r8, r8)
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	50000800 	.word	0x50000800

08000ae8 <offFinish_led>:


void offFinish_led(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
    GPIOC->ODR &= (0x00); 				// PC6 Board LED Off
 8000aec:	4b03      	ldr	r3, [pc, #12]	; (8000afc <offFinish_led+0x14>)
 8000aee:	695b      	ldr	r3, [r3, #20]
 8000af0:	4b02      	ldr	r3, [pc, #8]	; (8000afc <offFinish_led+0x14>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	615a      	str	r2, [r3, #20]
}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	50000800 	.word	0x50000800

08000b00 <RCC_config>:

void RCC_config(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
	/* Clock A,B and C activated */
    RCC->IOPENR |= (1U << 0);
 8000b04:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <RCC_config+0x30>)
 8000b06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b08:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <RCC_config+0x30>)
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	635a      	str	r2, [r3, #52]	; 0x34
    RCC->IOPENR |= (1U << 1);
 8000b10:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <RCC_config+0x30>)
 8000b12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <RCC_config+0x30>)
 8000b16:	2102      	movs	r1, #2
 8000b18:	430a      	orrs	r2, r1
 8000b1a:	635a      	str	r2, [r3, #52]	; 0x34
    RCC->IOPENR |= (1U << 2);
 8000b1c:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <RCC_config+0x30>)
 8000b1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b20:	4b03      	ldr	r3, [pc, #12]	; (8000b30 <RCC_config+0x30>)
 8000b22:	2104      	movs	r1, #4
 8000b24:	430a      	orrs	r2, r1
 8000b26:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	40021000 	.word	0x40021000

08000b34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b34:	480d      	ldr	r0, [pc, #52]	; (8000b6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b36:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b38:	f000 f826 	bl	8000b88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b3c:	480c      	ldr	r0, [pc, #48]	; (8000b70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b3e:	490d      	ldr	r1, [pc, #52]	; (8000b74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b40:	4a0d      	ldr	r2, [pc, #52]	; (8000b78 <LoopForever+0xe>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b44:	e002      	b.n	8000b4c <LoopCopyDataInit>

08000b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4a:	3304      	adds	r3, #4

08000b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b50:	d3f9      	bcc.n	8000b46 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b52:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b54:	4c0a      	ldr	r4, [pc, #40]	; (8000b80 <LoopForever+0x16>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b58:	e001      	b.n	8000b5e <LoopFillZerobss>

08000b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b5c:	3204      	adds	r2, #4

08000b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b60:	d3fb      	bcc.n	8000b5a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b62:	f000 f81d 	bl	8000ba0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b66:	f7ff fb55 	bl	8000214 <main>

08000b6a <LoopForever>:

LoopForever:
    b LoopForever
 8000b6a:	e7fe      	b.n	8000b6a <LoopForever>
  ldr   r0, =_estack
 8000b6c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b74:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000b78:	08000ca8 	.word	0x08000ca8
  ldr r2, =_sbss
 8000b7c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000b80:	2000003c 	.word	0x2000003c

08000b84 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b84:	e7fe      	b.n	8000b84 <ADC_COMP_IRQHandler>
	...

08000b88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b8c:	4b03      	ldr	r3, [pc, #12]	; (8000b9c <SystemInit+0x14>)
 8000b8e:	2280      	movs	r2, #128	; 0x80
 8000b90:	0512      	lsls	r2, r2, #20
 8000b92:	609a      	str	r2, [r3, #8]
#endif
}
 8000b94:	46c0      	nop			; (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <__libc_init_array>:
 8000ba0:	b570      	push	{r4, r5, r6, lr}
 8000ba2:	2600      	movs	r6, #0
 8000ba4:	4d0c      	ldr	r5, [pc, #48]	; (8000bd8 <__libc_init_array+0x38>)
 8000ba6:	4c0d      	ldr	r4, [pc, #52]	; (8000bdc <__libc_init_array+0x3c>)
 8000ba8:	1b64      	subs	r4, r4, r5
 8000baa:	10a4      	asrs	r4, r4, #2
 8000bac:	42a6      	cmp	r6, r4
 8000bae:	d109      	bne.n	8000bc4 <__libc_init_array+0x24>
 8000bb0:	2600      	movs	r6, #0
 8000bb2:	f000 f819 	bl	8000be8 <_init>
 8000bb6:	4d0a      	ldr	r5, [pc, #40]	; (8000be0 <__libc_init_array+0x40>)
 8000bb8:	4c0a      	ldr	r4, [pc, #40]	; (8000be4 <__libc_init_array+0x44>)
 8000bba:	1b64      	subs	r4, r4, r5
 8000bbc:	10a4      	asrs	r4, r4, #2
 8000bbe:	42a6      	cmp	r6, r4
 8000bc0:	d105      	bne.n	8000bce <__libc_init_array+0x2e>
 8000bc2:	bd70      	pop	{r4, r5, r6, pc}
 8000bc4:	00b3      	lsls	r3, r6, #2
 8000bc6:	58eb      	ldr	r3, [r5, r3]
 8000bc8:	4798      	blx	r3
 8000bca:	3601      	adds	r6, #1
 8000bcc:	e7ee      	b.n	8000bac <__libc_init_array+0xc>
 8000bce:	00b3      	lsls	r3, r6, #2
 8000bd0:	58eb      	ldr	r3, [r5, r3]
 8000bd2:	4798      	blx	r3
 8000bd4:	3601      	adds	r6, #1
 8000bd6:	e7f2      	b.n	8000bbe <__libc_init_array+0x1e>
 8000bd8:	08000ca0 	.word	0x08000ca0
 8000bdc:	08000ca0 	.word	0x08000ca0
 8000be0:	08000ca0 	.word	0x08000ca0
 8000be4:	08000ca4 	.word	0x08000ca4

08000be8 <_init>:
 8000be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bee:	bc08      	pop	{r3}
 8000bf0:	469e      	mov	lr, r3
 8000bf2:	4770      	bx	lr

08000bf4 <_fini>:
 8000bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bfa:	bc08      	pop	{r3}
 8000bfc:	469e      	mov	lr, r3
 8000bfe:	4770      	bx	lr
