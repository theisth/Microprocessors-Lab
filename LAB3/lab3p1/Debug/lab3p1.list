
lab3p1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000320  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003dc  080003e4  000103e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080003dc  080003dc  000103dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080003e0  080003e0  000103e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000103e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000000  080003e4  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000020  080003e4  00020020  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  000103e4  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000a3b  00000000  00000000  0001040c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000002f8  00000000  00000000  00010e47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000098  00000000  00000000  00011140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000070  00000000  00000000  000111d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   0000067f  00000000  00000000  00011248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    000005c7  00000000  00000000  000118c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .comment      00000050  00000000  00000000  00011e8e  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000013c  00000000  00000000  00011ee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000000 	.word	0x20000000
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080003c4 	.word	0x080003c4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000004 	.word	0x20000004
 8000100:	080003c4 	.word	0x080003c4

08000104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000104:	b580      	push	{r7, lr}
 8000106:	b082      	sub	sp, #8
 8000108:	af00      	add	r7, sp, #0
 800010a:	0002      	movs	r2, r0
 800010c:	1dfb      	adds	r3, r7, #7
 800010e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000110:	1dfb      	adds	r3, r7, #7
 8000112:	781b      	ldrb	r3, [r3, #0]
 8000114:	2b7f      	cmp	r3, #127	; 0x7f
 8000116:	d809      	bhi.n	800012c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000118:	1dfb      	adds	r3, r7, #7
 800011a:	781b      	ldrb	r3, [r3, #0]
 800011c:	001a      	movs	r2, r3
 800011e:	231f      	movs	r3, #31
 8000120:	401a      	ands	r2, r3
 8000122:	4b04      	ldr	r3, [pc, #16]	; (8000134 <__NVIC_EnableIRQ+0x30>)
 8000124:	2101      	movs	r1, #1
 8000126:	4091      	lsls	r1, r2
 8000128:	000a      	movs	r2, r1
 800012a:	601a      	str	r2, [r3, #0]
  }
}
 800012c:	46c0      	nop			; (mov r8, r8)
 800012e:	46bd      	mov	sp, r7
 8000130:	b002      	add	sp, #8
 8000132:	bd80      	pop	{r7, pc}
 8000134:	e000e100 	.word	0xe000e100

08000138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000138:	b590      	push	{r4, r7, lr}
 800013a:	b083      	sub	sp, #12
 800013c:	af00      	add	r7, sp, #0
 800013e:	0002      	movs	r2, r0
 8000140:	6039      	str	r1, [r7, #0]
 8000142:	1dfb      	adds	r3, r7, #7
 8000144:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000146:	1dfb      	adds	r3, r7, #7
 8000148:	781b      	ldrb	r3, [r3, #0]
 800014a:	2b7f      	cmp	r3, #127	; 0x7f
 800014c:	d828      	bhi.n	80001a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800014e:	4a2f      	ldr	r2, [pc, #188]	; (800020c <__NVIC_SetPriority+0xd4>)
 8000150:	1dfb      	adds	r3, r7, #7
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	b25b      	sxtb	r3, r3
 8000156:	089b      	lsrs	r3, r3, #2
 8000158:	33c0      	adds	r3, #192	; 0xc0
 800015a:	009b      	lsls	r3, r3, #2
 800015c:	589b      	ldr	r3, [r3, r2]
 800015e:	1dfa      	adds	r2, r7, #7
 8000160:	7812      	ldrb	r2, [r2, #0]
 8000162:	0011      	movs	r1, r2
 8000164:	2203      	movs	r2, #3
 8000166:	400a      	ands	r2, r1
 8000168:	00d2      	lsls	r2, r2, #3
 800016a:	21ff      	movs	r1, #255	; 0xff
 800016c:	4091      	lsls	r1, r2
 800016e:	000a      	movs	r2, r1
 8000170:	43d2      	mvns	r2, r2
 8000172:	401a      	ands	r2, r3
 8000174:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000176:	683b      	ldr	r3, [r7, #0]
 8000178:	019b      	lsls	r3, r3, #6
 800017a:	22ff      	movs	r2, #255	; 0xff
 800017c:	401a      	ands	r2, r3
 800017e:	1dfb      	adds	r3, r7, #7
 8000180:	781b      	ldrb	r3, [r3, #0]
 8000182:	0018      	movs	r0, r3
 8000184:	2303      	movs	r3, #3
 8000186:	4003      	ands	r3, r0
 8000188:	00db      	lsls	r3, r3, #3
 800018a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800018c:	481f      	ldr	r0, [pc, #124]	; (800020c <__NVIC_SetPriority+0xd4>)
 800018e:	1dfb      	adds	r3, r7, #7
 8000190:	781b      	ldrb	r3, [r3, #0]
 8000192:	b25b      	sxtb	r3, r3
 8000194:	089b      	lsrs	r3, r3, #2
 8000196:	430a      	orrs	r2, r1
 8000198:	33c0      	adds	r3, #192	; 0xc0
 800019a:	009b      	lsls	r3, r3, #2
 800019c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800019e:	e031      	b.n	8000204 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001a0:	4a1b      	ldr	r2, [pc, #108]	; (8000210 <__NVIC_SetPriority+0xd8>)
 80001a2:	1dfb      	adds	r3, r7, #7
 80001a4:	781b      	ldrb	r3, [r3, #0]
 80001a6:	0019      	movs	r1, r3
 80001a8:	230f      	movs	r3, #15
 80001aa:	400b      	ands	r3, r1
 80001ac:	3b08      	subs	r3, #8
 80001ae:	089b      	lsrs	r3, r3, #2
 80001b0:	3306      	adds	r3, #6
 80001b2:	009b      	lsls	r3, r3, #2
 80001b4:	18d3      	adds	r3, r2, r3
 80001b6:	3304      	adds	r3, #4
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	1dfa      	adds	r2, r7, #7
 80001bc:	7812      	ldrb	r2, [r2, #0]
 80001be:	0011      	movs	r1, r2
 80001c0:	2203      	movs	r2, #3
 80001c2:	400a      	ands	r2, r1
 80001c4:	00d2      	lsls	r2, r2, #3
 80001c6:	21ff      	movs	r1, #255	; 0xff
 80001c8:	4091      	lsls	r1, r2
 80001ca:	000a      	movs	r2, r1
 80001cc:	43d2      	mvns	r2, r2
 80001ce:	401a      	ands	r2, r3
 80001d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80001d2:	683b      	ldr	r3, [r7, #0]
 80001d4:	019b      	lsls	r3, r3, #6
 80001d6:	22ff      	movs	r2, #255	; 0xff
 80001d8:	401a      	ands	r2, r3
 80001da:	1dfb      	adds	r3, r7, #7
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	0018      	movs	r0, r3
 80001e0:	2303      	movs	r3, #3
 80001e2:	4003      	ands	r3, r0
 80001e4:	00db      	lsls	r3, r3, #3
 80001e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001e8:	4809      	ldr	r0, [pc, #36]	; (8000210 <__NVIC_SetPriority+0xd8>)
 80001ea:	1dfb      	adds	r3, r7, #7
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	001c      	movs	r4, r3
 80001f0:	230f      	movs	r3, #15
 80001f2:	4023      	ands	r3, r4
 80001f4:	3b08      	subs	r3, #8
 80001f6:	089b      	lsrs	r3, r3, #2
 80001f8:	430a      	orrs	r2, r1
 80001fa:	3306      	adds	r3, #6
 80001fc:	009b      	lsls	r3, r3, #2
 80001fe:	18c3      	adds	r3, r0, r3
 8000200:	3304      	adds	r3, #4
 8000202:	601a      	str	r2, [r3, #0]
}
 8000204:	46c0      	nop			; (mov r8, r8)
 8000206:	46bd      	mov	sp, r7
 8000208:	b003      	add	sp, #12
 800020a:	bd90      	pop	{r4, r7, pc}
 800020c:	e000e100 	.word	0xe000e100
 8000210:	e000ed00 	.word	0xe000ed00

08000214 <main>:
void SysTick_Handler(void);
void delay_ms(int ms);

int millis;

int main(void) {
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0

    /* Enable GPIOC clock */
    RCC->IOPENR |= (1U << 2);
 8000218:	4b13      	ldr	r3, [pc, #76]	; (8000268 <main+0x54>)
 800021a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800021c:	4b12      	ldr	r3, [pc, #72]	; (8000268 <main+0x54>)
 800021e:	2104      	movs	r1, #4
 8000220:	430a      	orrs	r2, r1
 8000222:	635a      	str	r2, [r3, #52]	; 0x34

    /* Setup PC6 as output */
    GPIOC->MODER &= ~(3U << 2*6);
 8000224:	4b11      	ldr	r3, [pc, #68]	; (800026c <main+0x58>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b10      	ldr	r3, [pc, #64]	; (800026c <main+0x58>)
 800022a:	4911      	ldr	r1, [pc, #68]	; (8000270 <main+0x5c>)
 800022c:	400a      	ands	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
    GPIOC->MODER |= (1U << 2*6);
 8000230:	4b0e      	ldr	r3, [pc, #56]	; (800026c <main+0x58>)
 8000232:	681a      	ldr	r2, [r3, #0]
 8000234:	4b0d      	ldr	r3, [pc, #52]	; (800026c <main+0x58>)
 8000236:	2180      	movs	r1, #128	; 0x80
 8000238:	0149      	lsls	r1, r1, #5
 800023a:	430a      	orrs	r2, r1
 800023c:	601a      	str	r2, [r3, #0]

    systickInit(); // init function for timer
 800023e:	f000 f83b 	bl	80002b8 <systickInit>

    /* Turn on LED */
    GPIOC->ODR |= (1U << 6);
 8000242:	4b0a      	ldr	r3, [pc, #40]	; (800026c <main+0x58>)
 8000244:	695a      	ldr	r2, [r3, #20]
 8000246:	4b09      	ldr	r3, [pc, #36]	; (800026c <main+0x58>)
 8000248:	2140      	movs	r1, #64	; 0x40
 800024a:	430a      	orrs	r2, r1
 800024c:	615a      	str	r2, [r3, #20]

    while(1) {
        GPIOC->ODR ^= (1U << 6);
 800024e:	4b07      	ldr	r3, [pc, #28]	; (800026c <main+0x58>)
 8000250:	695a      	ldr	r2, [r3, #20]
 8000252:	4b06      	ldr	r3, [pc, #24]	; (800026c <main+0x58>)
 8000254:	2140      	movs	r1, #64	; 0x40
 8000256:	404a      	eors	r2, r1
 8000258:	615a      	str	r2, [r3, #20]
        delay_ms(1000);
 800025a:	23fa      	movs	r3, #250	; 0xfa
 800025c:	009b      	lsls	r3, r3, #2
 800025e:	0018      	movs	r0, r3
 8000260:	f000 f814 	bl	800028c <delay_ms>
        GPIOC->ODR ^= (1U << 6);
 8000264:	e7f3      	b.n	800024e <main+0x3a>
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	40021000 	.word	0x40021000
 800026c:	50000800 	.word	0x50000800
 8000270:	ffffcfff 	.word	0xffffcfff

08000274 <SysTick_Handler>:

    return 0;
}

void SysTick_Handler(void) // kesme oluştuğunda girilecek fonksiyon
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	millis++;      // millis değerini 1 arttır
 8000278:	4b03      	ldr	r3, [pc, #12]	; (8000288 <SysTick_Handler+0x14>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	1c5a      	adds	r2, r3, #1
 800027e:	4b02      	ldr	r3, [pc, #8]	; (8000288 <SysTick_Handler+0x14>)
 8000280:	601a      	str	r2, [r3, #0]
}
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}
 8000288:	2000001c 	.word	0x2000001c

0800028c <delay_ms>:

void delay_ms(int ms)  // milisaniye cinsinden delay fonksiyonu
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b084      	sub	sp, #16
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
	int delay = millis+ms;
 8000294:	4b07      	ldr	r3, [pc, #28]	; (80002b4 <delay_ms+0x28>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	687a      	ldr	r2, [r7, #4]
 800029a:	18d3      	adds	r3, r2, r3
 800029c:	60fb      	str	r3, [r7, #12]
	while(millis<delay);
 800029e:	46c0      	nop			; (mov r8, r8)
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <delay_ms+0x28>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	68fa      	ldr	r2, [r7, #12]
 80002a6:	429a      	cmp	r2, r3
 80002a8:	dcfa      	bgt.n	80002a0 <delay_ms+0x14>
}
 80002aa:	46c0      	nop			; (mov r8, r8)
 80002ac:	46c0      	nop			; (mov r8, r8)
 80002ae:	46bd      	mov	sp, r7
 80002b0:	b004      	add	sp, #16
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	2000001c 	.word	0x2000001c

080002b8 <systickInit>:

void systickInit(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0

	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk; // Sayıcıyı aktif et
 80002bc:	4b12      	ldr	r3, [pc, #72]	; (8000308 <systickInit+0x50>)
 80002be:	681a      	ldr	r2, [r3, #0]
 80002c0:	4b11      	ldr	r3, [pc, #68]	; (8000308 <systickInit+0x50>)
 80002c2:	2101      	movs	r1, #1
 80002c4:	430a      	orrs	r2, r1
 80002c6:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 1999;                     // Reload değerini ata
 80002c8:	4b0f      	ldr	r3, [pc, #60]	; (8000308 <systickInit+0x50>)
 80002ca:	4a10      	ldr	r2, [pc, #64]	; (800030c <systickInit+0x54>)
 80002cc:	605a      	str	r2, [r3, #4]
	SysTick->VAL=0;                        // sayıcıyı sıfırla
 80002ce:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <systickInit+0x50>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;  // kesmeyi aktif et
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <systickInit+0x50>)
 80002d6:	681a      	ldr	r2, [r3, #0]
 80002d8:	4b0b      	ldr	r3, [pc, #44]	; (8000308 <systickInit+0x50>)
 80002da:	2102      	movs	r1, #2
 80002dc:	430a      	orrs	r2, r1
 80002de:	601a      	str	r2, [r3, #0]
	SysTick->CTRL &= ~(1<<2);                      //Systick clock source = AHB/8
 80002e0:	4b09      	ldr	r3, [pc, #36]	; (8000308 <systickInit+0x50>)
 80002e2:	681a      	ldr	r2, [r3, #0]
 80002e4:	4b08      	ldr	r3, [pc, #32]	; (8000308 <systickInit+0x50>)
 80002e6:	2104      	movs	r1, #4
 80002e8:	438a      	bics	r2, r1
 80002ea:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(SysTick_IRQn);     // NVIC tarafında kesmeyi aç
 80002ec:	2301      	movs	r3, #1
 80002ee:	425b      	negs	r3, r3
 80002f0:	0018      	movs	r0, r3
 80002f2:	f7ff ff07 	bl	8000104 <__NVIC_EnableIRQ>
	NVIC_SetPriority (SysTick_IRQn,0);  //kesme önceliğini ayarla
 80002f6:	2301      	movs	r3, #1
 80002f8:	425b      	negs	r3, r3
 80002fa:	2100      	movs	r1, #0
 80002fc:	0018      	movs	r0, r3
 80002fe:	f7ff ff1b 	bl	8000138 <__NVIC_SetPriority>

}
 8000302:	46c0      	nop			; (mov r8, r8)
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	e000e010 	.word	0xe000e010
 800030c:	000007cf 	.word	0x000007cf

08000310 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000310:	480d      	ldr	r0, [pc, #52]	; (8000348 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000312:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000314:	f000 f826 	bl	8000364 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000318:	480c      	ldr	r0, [pc, #48]	; (800034c <LoopForever+0x6>)
  ldr r1, =_edata
 800031a:	490d      	ldr	r1, [pc, #52]	; (8000350 <LoopForever+0xa>)
  ldr r2, =_sidata
 800031c:	4a0d      	ldr	r2, [pc, #52]	; (8000354 <LoopForever+0xe>)
  movs r3, #0
 800031e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000320:	e002      	b.n	8000328 <LoopCopyDataInit>

08000322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000326:	3304      	adds	r3, #4

08000328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800032a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800032c:	d3f9      	bcc.n	8000322 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800032e:	4a0a      	ldr	r2, [pc, #40]	; (8000358 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000330:	4c0a      	ldr	r4, [pc, #40]	; (800035c <LoopForever+0x16>)
  movs r3, #0
 8000332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000334:	e001      	b.n	800033a <LoopFillZerobss>

08000336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000338:	3204      	adds	r2, #4

0800033a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800033a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800033c:	d3fb      	bcc.n	8000336 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800033e:	f000 f81d 	bl	800037c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000342:	f7ff ff67 	bl	8000214 <main>

08000346 <LoopForever>:

LoopForever:
    b LoopForever
 8000346:	e7fe      	b.n	8000346 <LoopForever>
  ldr   r0, =_estack
 8000348:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800034c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000350:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000354:	080003e4 	.word	0x080003e4
  ldr r2, =_sbss
 8000358:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800035c:	20000020 	.word	0x20000020

08000360 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000360:	e7fe      	b.n	8000360 <ADC_COMP_IRQHandler>
	...

08000364 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000368:	4b03      	ldr	r3, [pc, #12]	; (8000378 <SystemInit+0x14>)
 800036a:	2280      	movs	r2, #128	; 0x80
 800036c:	0512      	lsls	r2, r2, #20
 800036e:	609a      	str	r2, [r3, #8]
#endif
}
 8000370:	46c0      	nop			; (mov r8, r8)
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	46c0      	nop			; (mov r8, r8)
 8000378:	e000ed00 	.word	0xe000ed00

0800037c <__libc_init_array>:
 800037c:	b570      	push	{r4, r5, r6, lr}
 800037e:	2600      	movs	r6, #0
 8000380:	4d0c      	ldr	r5, [pc, #48]	; (80003b4 <__libc_init_array+0x38>)
 8000382:	4c0d      	ldr	r4, [pc, #52]	; (80003b8 <__libc_init_array+0x3c>)
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	10a4      	asrs	r4, r4, #2
 8000388:	42a6      	cmp	r6, r4
 800038a:	d109      	bne.n	80003a0 <__libc_init_array+0x24>
 800038c:	2600      	movs	r6, #0
 800038e:	f000 f819 	bl	80003c4 <_init>
 8000392:	4d0a      	ldr	r5, [pc, #40]	; (80003bc <__libc_init_array+0x40>)
 8000394:	4c0a      	ldr	r4, [pc, #40]	; (80003c0 <__libc_init_array+0x44>)
 8000396:	1b64      	subs	r4, r4, r5
 8000398:	10a4      	asrs	r4, r4, #2
 800039a:	42a6      	cmp	r6, r4
 800039c:	d105      	bne.n	80003aa <__libc_init_array+0x2e>
 800039e:	bd70      	pop	{r4, r5, r6, pc}
 80003a0:	00b3      	lsls	r3, r6, #2
 80003a2:	58eb      	ldr	r3, [r5, r3]
 80003a4:	4798      	blx	r3
 80003a6:	3601      	adds	r6, #1
 80003a8:	e7ee      	b.n	8000388 <__libc_init_array+0xc>
 80003aa:	00b3      	lsls	r3, r6, #2
 80003ac:	58eb      	ldr	r3, [r5, r3]
 80003ae:	4798      	blx	r3
 80003b0:	3601      	adds	r6, #1
 80003b2:	e7f2      	b.n	800039a <__libc_init_array+0x1e>
 80003b4:	080003dc 	.word	0x080003dc
 80003b8:	080003dc 	.word	0x080003dc
 80003bc:	080003dc 	.word	0x080003dc
 80003c0:	080003e0 	.word	0x080003e0

080003c4 <_init>:
 80003c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003c6:	46c0      	nop			; (mov r8, r8)
 80003c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ca:	bc08      	pop	{r3}
 80003cc:	469e      	mov	lr, r3
 80003ce:	4770      	bx	lr

080003d0 <_fini>:
 80003d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d2:	46c0      	nop			; (mov r8, r8)
 80003d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003d6:	bc08      	pop	{r3}
 80003d8:	469e      	mov	lr, r3
 80003da:	4770      	bx	lr
