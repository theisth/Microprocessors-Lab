
lab2p5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000124  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .init         00000004  08000124  08000124  00010124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .fini         00000004  08000128  08000128  00010128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         00000000  20000000  20000000  0001012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000000  20000000  20000000  00000000  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  0001012c  2**0
                  CONTENTS, READONLY
  6 .debug_line   000000ae  00000000  00000000  00010154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00000026  00000000  00000000  00010202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00000014  00000000  00000000  00010228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 00000020  00000000  00000000  00010240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    00000043  00000000  00000000  00010260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000000 <vector_table>:
 8000000:	20002000 	.word	0x20002000
 8000004:	08000021 	.word	0x08000021
 8000008:	08000057 	.word	0x08000057
 800000c:	08000057 	.word	0x08000057
 8000010:	20000000 	.word	0x20000000
 8000014:	20000000 	.word	0x20000000
 8000018:	20000000 	.word	0x20000000
 800001c:	20000000 	.word	0x20000000

08000020 <Reset_Handler>:

/* reset handler */
.section .text
Reset_Handler:
	/* set stack pointer */
	ldr r0, =_estack
 8000020:	4831      	ldr	r0, [pc, #196]	; (80000e8 <delay+0xa>)
	mov sp, r0
 8000022:	4685      	mov	sp, r0

	/* initialize data and bss
	 * not necessary for rom only code
	 * */
	bl init_data
 8000024:	f000 f803 	bl	800002e <init_data>
	/* call main */
	bl main
 8000028:	f000 f816 	bl	8000058 <main>
	/* trap if returned */
	b .
 800002c:	e7fe      	b.n	800002c <Reset_Handler+0xc>

0800002e <init_data>:
/* initialize data and bss sections */
.section .text
init_data:

	/* copy rom to ram */
	ldr r0, =_sdata
 800002e:	482f      	ldr	r0, [pc, #188]	; (80000ec <delay+0xe>)
	ldr r1, =_edata
 8000030:	492f      	ldr	r1, [pc, #188]	; (80000f0 <delay+0x12>)
	ldr r2, =_sidata
 8000032:	4a30      	ldr	r2, [pc, #192]	; (80000f4 <delay+0x16>)
	movs r3, #0
 8000034:	2300      	movs	r3, #0
	b LoopCopyDataInit
 8000036:	e002      	b.n	800003e <LoopCopyDataInit>

08000038 <CopyDataInit>:

	CopyDataInit:
		ldr r4, [r2, r3]
 8000038:	58d4      	ldr	r4, [r2, r3]
		str r4, [r0, r3]
 800003a:	50c4      	str	r4, [r0, r3]
		adds r3, r3, #4
 800003c:	3304      	adds	r3, #4

0800003e <LoopCopyDataInit>:

	LoopCopyDataInit:
		adds r4, r0, r3
 800003e:	18c4      	adds	r4, r0, r3
		cmp r4, r1
 8000040:	428c      	cmp	r4, r1
		bcc CopyDataInit
 8000042:	d3f9      	bcc.n	8000038 <CopyDataInit>

	/* zero bss */
	ldr r2, =_sbss
 8000044:	4a2c      	ldr	r2, [pc, #176]	; (80000f8 <delay+0x1a>)
	ldr r4, =_ebss
 8000046:	4c2d      	ldr	r4, [pc, #180]	; (80000fc <delay+0x1e>)
	movs r3, #0
 8000048:	2300      	movs	r3, #0
	b LoopFillZerobss
 800004a:	e001      	b.n	8000050 <LoopFillZerobss>

0800004c <FillZerobss>:

	FillZerobss:
		str  r3, [r2]
 800004c:	6013      	str	r3, [r2, #0]
		adds r2, r2, #4
 800004e:	3204      	adds	r2, #4

08000050 <LoopFillZerobss>:

	LoopFillZerobss:
		cmp r2, r4
 8000050:	42a2      	cmp	r2, r4
		bcc FillZerobss
 8000052:	d3fb      	bcc.n	800004c <FillZerobss>

	bx lr
 8000054:	4770      	bx	lr

08000056 <Default_Handler>:


/* default handler */
.section .text
Default_Handler:
	b Default_Handler
 8000056:	e7fe      	b.n	8000056 <Default_Handler>

08000058 <main>:

/* main function */
.section .text
main:
	/* enable GPIOB clock, bit2 set on IOPENR */
	ldr r6, =RCC_IOPENR
 8000058:	4e29      	ldr	r6, [pc, #164]	; (8000100 <delay+0x22>)
	ldr r5, [r6]
 800005a:	6835      	ldr	r5, [r6, #0]

	movs r4, 0x2
 800005c:	2402      	movs	r4, #2
	orrs r5, r5, r4
 800005e:	4325      	orrs	r5, r4
	str r5, [r6]
 8000060:	6035      	str	r5, [r6, #0]

	/* setup from PB0 to PB7 output for leds with MODER */
	ldr r6, =GPIOB_MODER
 8000062:	4e28      	ldr	r6, [pc, #160]	; (8000104 <delay+0x26>)
	ldr r5, [r6]
 8000064:	6835      	ldr	r5, [r6, #0]

	ldr r4, =0xFFFF
 8000066:	4c28      	ldr	r4, [pc, #160]	; (8000108 <delay+0x2a>)
	mvns r4, r4
 8000068:	43e4      	mvns	r4, r4
	ands r5, r5, r4
 800006a:	4025      	ands	r5, r4
	ldr r4, =0x5555
 800006c:	4c27      	ldr	r4, [pc, #156]	; (800010c <delay+0x2e>)
	orrs r5, r5, r4
 800006e:	4325      	orrs	r5, r4
	str r5, [r6]
 8000070:	6035      	str	r5, [r6, #0]

08000072 <start>:

start: // for first two action
	/* turn on leds connected to B port with ODR */
	ldr r6, =GPIOB_ODR
 8000072:	4e27      	ldr	r6, [pc, #156]	; (8000110 <delay+0x32>)
	ldr r5, [r6]
 8000074:	6835      	ldr	r5, [r6, #0]
	ldr r4, =0x80 // r4 = 1000 0000
 8000076:	4c27      	ldr	r4, [pc, #156]	; (8000114 <delay+0x36>)
	orrs r5, r5, r4
 8000078:	4325      	orrs	r5, r4
	str r5, [r6]
 800007a:	6035      	str	r5, [r6, #0]

	ldr r0,=#1000000 //reload
 800007c:	4826      	ldr	r0, [pc, #152]	; (8000118 <delay+0x3a>)
	bl delay //0.125 sec delay
 800007e:	f000 f82e 	bl	80000de <delay>

	ldr r7,=0x80
 8000082:	4f24      	ldr	r7, [pc, #144]	; (8000114 <delay+0x36>)

	lsrs r4, r4, #1 //shift right
 8000084:	0864      	lsrs	r4, r4, #1
	orrs r4, r4, r7
 8000086:	433c      	orrs	r4, r7
	bics r5, r5, r5 //reset
 8000088:	43ad      	bics	r5, r5

	orrs r5, r5, r4
 800008a:	4325      	orrs	r5, r4
	str r5, [r6] //r5 = 1100 0000 load
 800008c:	6035      	str	r5, [r6, #0]

	ldr r0,=#1000000 //reload
 800008e:	4822      	ldr	r0, [pc, #136]	; (8000118 <delay+0x3a>)
	bl delay //0.125 sec delay
 8000090:	f000 f825 	bl	80000de <delay>


	lsrs r4, r4, #1 //shift right
 8000094:	0864      	lsrs	r4, r4, #1
	orrs r4, r4, r7
 8000096:	433c      	orrs	r4, r7
	bics r5, r5, r5 //reset
 8000098:	43ad      	bics	r5, r5

	orrs r5, r5, r4
 800009a:	4325      	orrs	r5, r4
	str r5, [r6] // r5 = 1100 0000 load
 800009c:	6035      	str	r5, [r6, #0]

	bics r5, r5, r5 //reset again before enter loop
 800009e:	43ad      	bics	r5, r5

	ldr r6, =GPIOB_ODR
 80000a0:	4e1b      	ldr	r6, [pc, #108]	; (8000110 <delay+0x32>)
	ldr r5, [r6]
 80000a2:	6835      	ldr	r5, [r6, #0]
	ldr r4, =0xE0 // r4 = 1110 0000 set again bits
 80000a4:	4c1d      	ldr	r4, [pc, #116]	; (800011c <delay+0x3e>)
	orrs r5, r5, r4
 80000a6:	4325      	orrs	r5, r4
	str r5, [r6]
 80000a8:	6035      	str	r5, [r6, #0]

	ldr r0,=#1000000 //reload
 80000aa:	481b      	ldr	r0, [pc, #108]	; (8000118 <delay+0x3a>)
	bl delay //0.125 sec delay
 80000ac:	f000 f817 	bl	80000de <delay>

	ldr r1, =0x07 // r1 = 0000 0111
 80000b0:	491b      	ldr	r1, [pc, #108]	; (8000120 <delay+0x42>)
	ldr r2, =0xE0 // r2 = 1110 0000
 80000b2:	4a1a      	ldr	r2, [pc, #104]	; (800011c <delay+0x3e>)

	b Right_time
 80000b4:	e7ff      	b.n	80000b6 <Right_time>

080000b6 <Right_time>:

Right_time: //right side function
	cmp r4 , r1 //if r4 == 0000 0111
 80000b6:	428c      	cmp	r4, r1
	beq Left_time
 80000b8:	d007      	beq.n	80000ca <Left_time>

	lsrs r4, r4, #1 //shift right
 80000ba:	0864      	lsrs	r4, r4, #1
	bics r5, r5, r5
 80000bc:	43ad      	bics	r5, r5

	orrs r5, r5, r4
 80000be:	4325      	orrs	r5, r4
	str r5, [r6]
 80000c0:	6035      	str	r5, [r6, #0]

	ldr r0,=#1000000 //reload
 80000c2:	4815      	ldr	r0, [pc, #84]	; (8000118 <delay+0x3a>)
	bl delay // 0.125 sec. delay
 80000c4:	f000 f80b 	bl	80000de <delay>
	b Right_time
 80000c8:	e7f5      	b.n	80000b6 <Right_time>

080000ca <Left_time>:

Left_time: //left time funciton
	cmp r4 , r2 // if r4 == 1110 0000
 80000ca:	4294      	cmp	r4, r2
	beq Right_time
 80000cc:	d0f3      	beq.n	80000b6 <Right_time>

	lsls r4, r4, #1
 80000ce:	0064      	lsls	r4, r4, #1
	bics r5, r5, r5
 80000d0:	43ad      	bics	r5, r5

	orrs r5, r5, r4
 80000d2:	4325      	orrs	r5, r4
	str r5, [r6]
 80000d4:	6035      	str	r5, [r6, #0]

	ldr r0,=#1000000 //reload
 80000d6:	4810      	ldr	r0, [pc, #64]	; (8000118 <delay+0x3a>)
	bl delay // 0.125 sec. delay
 80000d8:	f000 f801 	bl	80000de <delay>
	b Left_time
 80000dc:	e7f5      	b.n	80000ca <Left_time>

080000de <delay>:


delay:
	subs r0,#1 // x = x - 1
 80000de:	3801      	subs	r0, #1
	bne delay
 80000e0:	d1fd      	bne.n	80000de <delay>
	bx lr
 80000e2:	4770      	bx	lr



	/* for(;;); */
	b .
 80000e4:	e7fe      	b.n	80000e4 <delay+0x6>

	/* this should never get executed */
	nop
 80000e6:	46c0      	nop			; (mov r8, r8)
	ldr r0, =_estack
 80000e8:	20002000 	.word	0x20002000
	ldr r0, =_sdata
 80000ec:	20000000 	.word	0x20000000
	ldr r1, =_edata
 80000f0:	20000000 	.word	0x20000000
	ldr r2, =_sidata
 80000f4:	0800012c 	.word	0x0800012c
	ldr r2, =_sbss
 80000f8:	20000000 	.word	0x20000000
	ldr r4, =_ebss
 80000fc:	20000000 	.word	0x20000000
	ldr r6, =RCC_IOPENR
 8000100:	40021034 	.word	0x40021034
	ldr r6, =GPIOB_MODER
 8000104:	50000400 	.word	0x50000400
	ldr r4, =0xFFFF
 8000108:	0000ffff 	.word	0x0000ffff
	ldr r4, =0x5555
 800010c:	00005555 	.word	0x00005555
	ldr r6, =GPIOB_ODR
 8000110:	50000414 	.word	0x50000414
	ldr r4, =0x80 // r4 = 1000 0000
 8000114:	00000080 	.word	0x00000080
	ldr r0,=#1000000 //reload
 8000118:	000f4240 	.word	0x000f4240
	ldr r4, =0xE0 // r4 = 1110 0000 set again bits
 800011c:	000000e0 	.word	0x000000e0
	ldr r1, =0x07 // r1 = 0000 0111
 8000120:	00000007 	.word	0x00000007

Disassembly of section .init:

08000124 <_init>:
 8000124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000126:	46c0      	nop			; (mov r8, r8)

Disassembly of section .fini:

08000128 <_fini>:
 8000128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800012a:	46c0      	nop			; (mov r8, r8)
