
lab2p4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000130  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .init         00000004  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .fini         00000004  08000134  08000134  00010134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         00000000  20000000  20000000  00010138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000000  20000000  20000000  00000000  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00010138  2**0
                  CONTENTS, READONLY
  6 .debug_line   000000b5  00000000  00000000  00010160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00000026  00000000  00000000  00010215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00000014  00000000  00000000  0001023b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 00000020  00000000  00000000  00010250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    00000043  00000000  00000000  00010270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000000 <vector_table>:
 8000000:	20002000 	.word	0x20002000
 8000004:	08000021 	.word	0x08000021
 8000008:	08000057 	.word	0x08000057
 800000c:	08000057 	.word	0x08000057
 8000010:	20000000 	.word	0x20000000
 8000014:	20000000 	.word	0x20000000
 8000018:	20000000 	.word	0x20000000
 800001c:	20000000 	.word	0x20000000

08000020 <Reset_Handler>:

/* reset handler */
.section .text
Reset_Handler:
	/* set stack pointer */
	ldr r0, =_estack
 8000020:	4831      	ldr	r0, [pc, #196]	; (80000e8 <delay+0xa>)
	mov sp, r0
 8000022:	4685      	mov	sp, r0

	/* initialize data and bss
	 * not necessary for rom only code
	 * */
	bl init_data
 8000024:	f000 f803 	bl	800002e <init_data>
	/* call main */
	bl main
 8000028:	f000 f816 	bl	8000058 <main>
	/* trap if returned */
	b .
 800002c:	e7fe      	b.n	800002c <Reset_Handler+0xc>

0800002e <init_data>:
/* initialize data and bss sections */
.section .text
init_data:

	/* copy rom to ram */
	ldr r0, =_sdata
 800002e:	482f      	ldr	r0, [pc, #188]	; (80000ec <delay+0xe>)
	ldr r1, =_edata
 8000030:	492f      	ldr	r1, [pc, #188]	; (80000f0 <delay+0x12>)
	ldr r2, =_sidata
 8000032:	4a30      	ldr	r2, [pc, #192]	; (80000f4 <delay+0x16>)
	movs r3, #0
 8000034:	2300      	movs	r3, #0
	b LoopCopyDataInit
 8000036:	e002      	b.n	800003e <LoopCopyDataInit>

08000038 <CopyDataInit>:

	CopyDataInit:
		ldr r4, [r2, r3]
 8000038:	58d4      	ldr	r4, [r2, r3]
		str r4, [r0, r3]
 800003a:	50c4      	str	r4, [r0, r3]
		adds r3, r3, #4
 800003c:	3304      	adds	r3, #4

0800003e <LoopCopyDataInit>:

	LoopCopyDataInit:
		adds r4, r0, r3
 800003e:	18c4      	adds	r4, r0, r3
		cmp r4, r1
 8000040:	428c      	cmp	r4, r1
		bcc CopyDataInit
 8000042:	d3f9      	bcc.n	8000038 <CopyDataInit>

	/* zero bss */
	ldr r2, =_sbss
 8000044:	4a2c      	ldr	r2, [pc, #176]	; (80000f8 <delay+0x1a>)
	ldr r4, =_ebss
 8000046:	4c2d      	ldr	r4, [pc, #180]	; (80000fc <delay+0x1e>)
	movs r3, #0
 8000048:	2300      	movs	r3, #0
	b LoopFillZerobss
 800004a:	e001      	b.n	8000050 <LoopFillZerobss>

0800004c <FillZerobss>:

	FillZerobss:
		str  r3, [r2]
 800004c:	6013      	str	r3, [r2, #0]
		adds r2, r2, #4
 800004e:	3204      	adds	r2, #4

08000050 <LoopFillZerobss>:

	LoopFillZerobss:
		cmp r2, r4
 8000050:	42a2      	cmp	r2, r4
		bcc FillZerobss
 8000052:	d3fb      	bcc.n	800004c <FillZerobss>

	bx lr
 8000054:	4770      	bx	lr

08000056 <Default_Handler>:


/* default handler */
.section .text
Default_Handler:
	b Default_Handler
 8000056:	e7fe      	b.n	8000056 <Default_Handler>

08000058 <main>:

/* main function */
.section .text
main:
	/* enable GPIOB-A clock, bit0 and bit1 set on IOPENR */
	ldr r6, =RCC_IOPENR
 8000058:	4e29      	ldr	r6, [pc, #164]	; (8000100 <delay+0x22>)
	ldr r5, [r6]
 800005a:	6835      	ldr	r5, [r6, #0]

	movs r4, 0x3
 800005c:	2403      	movs	r4, #3
	orrs r5, r5, r4
 800005e:	4325      	orrs	r5, r4
	str r5, [r6]
 8000060:	6035      	str	r5, [r6, #0]

	// PA1 input 00 with MODER (button)
	ldr r6, =GPIOA_MODER
 8000062:	4e28      	ldr	r6, [pc, #160]	; (8000104 <delay+0x26>)
	ldr r5, [r6]
 8000064:	6835      	ldr	r5, [r6, #0]
	ldr r4, =0x3
 8000066:	4c28      	ldr	r4, [pc, #160]	; (8000108 <delay+0x2a>)
	lsls r4, r4, #2
 8000068:	00a4      	lsls	r4, r4, #2
	mvns r4, r4
 800006a:	43e4      	mvns	r4, r4
	ands r5, r5, r4
 800006c:	4025      	ands	r5, r4
	str r5, [r6]
 800006e:	6035      	str	r5, [r6, #0]

	// setup from PB0 to PB7 as output
	ldr r6, =GPIOB_MODER
 8000070:	4e26      	ldr	r6, [pc, #152]	; (800010c <delay+0x2e>)
	ldr r5, [r6]
 8000072:	6835      	ldr	r5, [r6, #0]

	ldr r4, =0xFFFF
 8000074:	4c26      	ldr	r4, [pc, #152]	; (8000110 <delay+0x32>)
	mvns r4, r4
 8000076:	43e4      	mvns	r4, r4
	ands r5, r5, r4
 8000078:	4025      	ands	r5, r4
	ldr r4, =0x5555
 800007a:	4c26      	ldr	r4, [pc, #152]	; (8000114 <delay+0x36>)
	orrs r5, r5, r4
 800007c:	4325      	orrs	r5, r4
	str r5, [r6]
 800007e:	6035      	str	r5, [r6, #0]

	ldr r6, =GPIOB_ODR
 8000080:	4e25      	ldr	r6, [pc, #148]	; (8000118 <delay+0x3a>)
	ldr r1, = #0xE0 // 1110 0000
 8000082:	4926      	ldr	r1, [pc, #152]	; (800011c <delay+0x3e>)
	str r1, [r6]
 8000084:	6031      	str	r1, [r6, #0]
	ldr r0, = #0x1 // starting condition
 8000086:	4826      	ldr	r0, [pc, #152]	; (8000120 <delay+0x42>)

08000088 <button_ctrl>:


button_ctrl:
	// PA1 button connection
	ldr r6, =GPIOA_IDR
 8000088:	4e26      	ldr	r6, [pc, #152]	; (8000124 <delay+0x46>)
	ldr r5, [r6]
 800008a:	6835      	ldr	r5, [r6, #0]
	lsrs r5, r5, #1 // logic shift right 1 bit
 800008c:	086d      	lsrs	r5, r5, #1
	movs r4, #0x1 //r4=0x1
 800008e:	2401      	movs	r4, #1
	ands r5, r5, r4 // GPIOA_IDR and r4
 8000090:	4025      	ands	r5, r4

	cmp r5, #0x1 // if r5 == 1
 8000092:	2d01      	cmp	r5, #1
	beq change
 8000094:	d002      	beq.n	800009c <change>

	cmp r0, #0x1
 8000096:	2801      	cmp	r0, #1
	beq left // left side function
 8000098:	d016      	beq.n	80000c8 <left>
	bne right // right side function
 800009a:	d106      	bne.n	80000aa <right>

0800009c <change>:

change: // direction function
	cmp r0, #0x1 // if r0 == 1
 800009c:	2801      	cmp	r0, #1
	beq if
 800009e:	d000      	beq.n	80000a2 <if>
	bne else
 80000a0:	d101      	bne.n	80000a6 <else>

080000a2 <if>:

if:
	ldr r0, = #0x0
 80000a2:	4821      	ldr	r0, [pc, #132]	; (8000128 <delay+0x4a>)
	b button_ctrl
 80000a4:	e7f0      	b.n	8000088 <button_ctrl>

080000a6 <else>:

else:
	ldr r0, = #0x1
 80000a6:	481e      	ldr	r0, [pc, #120]	; (8000120 <delay+0x42>)
	b button_ctrl
 80000a8:	e7ee      	b.n	8000088 <button_ctrl>

080000aa <right>:


right:

	movs r3, #0x1 //0001
 80000aa:	2301      	movs	r3, #1
	movs r2, r1
 80000ac:	000a      	movs	r2, r1
	ands r2, r2, r3
 80000ae:	401a      	ands	r2, r3
	lsls r2, r2, #7 // 7 shift to left
 80000b0:	01d2      	lsls	r2, r2, #7
	lsrs r1, r1, #1 // 1 shift to right
 80000b2:	0849      	lsrs	r1, r1, #1
	movs r4, #0x1
 80000b4:	2401      	movs	r4, #1
	lsls r4, r4, #7	// 7 shift to left
 80000b6:	01e4      	lsls	r4, r4, #7
	bics r1, r1, r4	// 1 shift to right
 80000b8:	43a1      	bics	r1, r4
	orrs r1, r1, r2
 80000ba:	4311      	orrs	r1, r2
	ldr r6, =GPIOB_ODR
 80000bc:	4e16      	ldr	r6, [pc, #88]	; (8000118 <delay+0x3a>)
	str r1, [r6]
 80000be:	6031      	str	r1, [r6, #0]
	ldr r5,=#1000000 // reload
 80000c0:	4d1a      	ldr	r5, [pc, #104]	; (800012c <delay+0x4e>)
	bl delay	// 0.125 sec. delay
 80000c2:	f000 f80c 	bl	80000de <delay>
	b button_ctrl
 80000c6:	e7df      	b.n	8000088 <button_ctrl>

080000c8 <left>:

left:

	lsls r2, r1, #1
 80000c8:	004a      	lsls	r2, r1, #1
	lsrs r1, r1, #7 //7 shift to right
 80000ca:	09c9      	lsrs	r1, r1, #7
	movs r3, #0x1
 80000cc:	2301      	movs	r3, #1
	ands r1, r1, r3
 80000ce:	4019      	ands	r1, r3
	orrs r1, r2, r1
 80000d0:	4311      	orrs	r1, r2
	ldr r6, =GPIOB_ODR
 80000d2:	4e11      	ldr	r6, [pc, #68]	; (8000118 <delay+0x3a>)
	str r1, [r6]
 80000d4:	6031      	str	r1, [r6, #0]
	ldr r5,=#1000000 //reload
 80000d6:	4d15      	ldr	r5, [pc, #84]	; (800012c <delay+0x4e>)
	bl delay // 0.125 sec. delay
 80000d8:	f000 f801 	bl	80000de <delay>
	b button_ctrl
 80000dc:	e7d4      	b.n	8000088 <button_ctrl>

080000de <delay>:

delay: //delay
	subs r5,r5,#1 //x = x - 1
 80000de:	3d01      	subs	r5, #1
	bne delay
 80000e0:	d1fd      	bne.n	80000de <delay>
	bx lr
 80000e2:	4770      	bx	lr
	nop
 80000e4:	46c0      	nop			; (mov r8, r8)
 80000e6:	0000      	.short	0x0000
	ldr r0, =_estack
 80000e8:	20002000 	.word	0x20002000
	ldr r0, =_sdata
 80000ec:	20000000 	.word	0x20000000
	ldr r1, =_edata
 80000f0:	20000000 	.word	0x20000000
	ldr r2, =_sidata
 80000f4:	08000138 	.word	0x08000138
	ldr r2, =_sbss
 80000f8:	20000000 	.word	0x20000000
	ldr r4, =_ebss
 80000fc:	20000000 	.word	0x20000000
	ldr r6, =RCC_IOPENR
 8000100:	40021034 	.word	0x40021034
	ldr r6, =GPIOA_MODER
 8000104:	50000000 	.word	0x50000000
	ldr r4, =0x3
 8000108:	00000003 	.word	0x00000003
	ldr r6, =GPIOB_MODER
 800010c:	50000400 	.word	0x50000400
	ldr r4, =0xFFFF
 8000110:	0000ffff 	.word	0x0000ffff
	ldr r4, =0x5555
 8000114:	00005555 	.word	0x00005555
	ldr r6, =GPIOB_ODR
 8000118:	50000414 	.word	0x50000414
	ldr r1, = #0xE0 // 1110 0000
 800011c:	000000e0 	.word	0x000000e0
	ldr r0, = #0x1 // starting condition
 8000120:	00000001 	.word	0x00000001
	ldr r6, =GPIOA_IDR
 8000124:	50000010 	.word	0x50000010
	ldr r0, = #0x0
 8000128:	00000000 	.word	0x00000000
	ldr r5,=#1000000 // reload
 800012c:	000f4240 	.word	0x000f4240

Disassembly of section .init:

08000130 <_init>:
 8000130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000132:	46c0      	nop			; (mov r8, r8)

Disassembly of section .fini:

08000134 <_fini>:
 8000134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000136:	46c0      	nop			; (mov r8, r8)
