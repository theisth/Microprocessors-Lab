
lab4p2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003d4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000490  08000498  00010498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000490  08000490  00010490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000494  08000494  00010494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000000  08000498  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000020  08000498  00020020  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00010498  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000b9c  00000000  00000000  000104c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000002d0  00000000  00000000  0001105c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000098  00000000  00000000  00011330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000070  00000000  00000000  000113c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   000006b7  00000000  00000000  00011438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    0000061e  00000000  00000000  00011aef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .comment      00000050  00000000  00000000  0001210d  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000138  00000000  00000000  00012160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000000 	.word	0x20000000
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08000478 	.word	0x08000478

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000004 	.word	0x20000004
 8000100:	08000478 	.word	0x08000478

08000104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000104:	b580      	push	{r7, lr}
 8000106:	b082      	sub	sp, #8
 8000108:	af00      	add	r7, sp, #0
 800010a:	0002      	movs	r2, r0
 800010c:	1dfb      	adds	r3, r7, #7
 800010e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000110:	1dfb      	adds	r3, r7, #7
 8000112:	781b      	ldrb	r3, [r3, #0]
 8000114:	2b7f      	cmp	r3, #127	; 0x7f
 8000116:	d809      	bhi.n	800012c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000118:	1dfb      	adds	r3, r7, #7
 800011a:	781b      	ldrb	r3, [r3, #0]
 800011c:	001a      	movs	r2, r3
 800011e:	231f      	movs	r3, #31
 8000120:	401a      	ands	r2, r3
 8000122:	4b04      	ldr	r3, [pc, #16]	; (8000134 <__NVIC_EnableIRQ+0x30>)
 8000124:	2101      	movs	r1, #1
 8000126:	4091      	lsls	r1, r2
 8000128:	000a      	movs	r2, r1
 800012a:	601a      	str	r2, [r3, #0]
  }
}
 800012c:	46c0      	nop			; (mov r8, r8)
 800012e:	46bd      	mov	sp, r7
 8000130:	b002      	add	sp, #8
 8000132:	bd80      	pop	{r7, pc}
 8000134:	e000e100 	.word	0xe000e100

08000138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000138:	b590      	push	{r4, r7, lr}
 800013a:	b083      	sub	sp, #12
 800013c:	af00      	add	r7, sp, #0
 800013e:	0002      	movs	r2, r0
 8000140:	6039      	str	r1, [r7, #0]
 8000142:	1dfb      	adds	r3, r7, #7
 8000144:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000146:	1dfb      	adds	r3, r7, #7
 8000148:	781b      	ldrb	r3, [r3, #0]
 800014a:	2b7f      	cmp	r3, #127	; 0x7f
 800014c:	d828      	bhi.n	80001a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800014e:	4a2f      	ldr	r2, [pc, #188]	; (800020c <__NVIC_SetPriority+0xd4>)
 8000150:	1dfb      	adds	r3, r7, #7
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	b25b      	sxtb	r3, r3
 8000156:	089b      	lsrs	r3, r3, #2
 8000158:	33c0      	adds	r3, #192	; 0xc0
 800015a:	009b      	lsls	r3, r3, #2
 800015c:	589b      	ldr	r3, [r3, r2]
 800015e:	1dfa      	adds	r2, r7, #7
 8000160:	7812      	ldrb	r2, [r2, #0]
 8000162:	0011      	movs	r1, r2
 8000164:	2203      	movs	r2, #3
 8000166:	400a      	ands	r2, r1
 8000168:	00d2      	lsls	r2, r2, #3
 800016a:	21ff      	movs	r1, #255	; 0xff
 800016c:	4091      	lsls	r1, r2
 800016e:	000a      	movs	r2, r1
 8000170:	43d2      	mvns	r2, r2
 8000172:	401a      	ands	r2, r3
 8000174:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000176:	683b      	ldr	r3, [r7, #0]
 8000178:	019b      	lsls	r3, r3, #6
 800017a:	22ff      	movs	r2, #255	; 0xff
 800017c:	401a      	ands	r2, r3
 800017e:	1dfb      	adds	r3, r7, #7
 8000180:	781b      	ldrb	r3, [r3, #0]
 8000182:	0018      	movs	r0, r3
 8000184:	2303      	movs	r3, #3
 8000186:	4003      	ands	r3, r0
 8000188:	00db      	lsls	r3, r3, #3
 800018a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800018c:	481f      	ldr	r0, [pc, #124]	; (800020c <__NVIC_SetPriority+0xd4>)
 800018e:	1dfb      	adds	r3, r7, #7
 8000190:	781b      	ldrb	r3, [r3, #0]
 8000192:	b25b      	sxtb	r3, r3
 8000194:	089b      	lsrs	r3, r3, #2
 8000196:	430a      	orrs	r2, r1
 8000198:	33c0      	adds	r3, #192	; 0xc0
 800019a:	009b      	lsls	r3, r3, #2
 800019c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800019e:	e031      	b.n	8000204 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001a0:	4a1b      	ldr	r2, [pc, #108]	; (8000210 <__NVIC_SetPriority+0xd8>)
 80001a2:	1dfb      	adds	r3, r7, #7
 80001a4:	781b      	ldrb	r3, [r3, #0]
 80001a6:	0019      	movs	r1, r3
 80001a8:	230f      	movs	r3, #15
 80001aa:	400b      	ands	r3, r1
 80001ac:	3b08      	subs	r3, #8
 80001ae:	089b      	lsrs	r3, r3, #2
 80001b0:	3306      	adds	r3, #6
 80001b2:	009b      	lsls	r3, r3, #2
 80001b4:	18d3      	adds	r3, r2, r3
 80001b6:	3304      	adds	r3, #4
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	1dfa      	adds	r2, r7, #7
 80001bc:	7812      	ldrb	r2, [r2, #0]
 80001be:	0011      	movs	r1, r2
 80001c0:	2203      	movs	r2, #3
 80001c2:	400a      	ands	r2, r1
 80001c4:	00d2      	lsls	r2, r2, #3
 80001c6:	21ff      	movs	r1, #255	; 0xff
 80001c8:	4091      	lsls	r1, r2
 80001ca:	000a      	movs	r2, r1
 80001cc:	43d2      	mvns	r2, r2
 80001ce:	401a      	ands	r2, r3
 80001d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80001d2:	683b      	ldr	r3, [r7, #0]
 80001d4:	019b      	lsls	r3, r3, #6
 80001d6:	22ff      	movs	r2, #255	; 0xff
 80001d8:	401a      	ands	r2, r3
 80001da:	1dfb      	adds	r3, r7, #7
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	0018      	movs	r0, r3
 80001e0:	2303      	movs	r3, #3
 80001e2:	4003      	ands	r3, r0
 80001e4:	00db      	lsls	r3, r3, #3
 80001e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001e8:	4809      	ldr	r0, [pc, #36]	; (8000210 <__NVIC_SetPriority+0xd8>)
 80001ea:	1dfb      	adds	r3, r7, #7
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	001c      	movs	r4, r3
 80001f0:	230f      	movs	r3, #15
 80001f2:	4023      	ands	r3, r4
 80001f4:	3b08      	subs	r3, #8
 80001f6:	089b      	lsrs	r3, r3, #2
 80001f8:	430a      	orrs	r2, r1
 80001fa:	3306      	adds	r3, #6
 80001fc:	009b      	lsls	r3, r3, #2
 80001fe:	18c3      	adds	r3, r0, r3
 8000200:	3304      	adds	r3, #4
 8000202:	601a      	str	r2, [r3, #0]
}
 8000204:	46c0      	nop			; (mov r8, r8)
 8000206:	46bd      	mov	sp, r7
 8000208:	b003      	add	sp, #12
 800020a:	bd90      	pop	{r4, r7, pc}
 800020c:	e000e100 	.word	0xe000e100
 8000210:	e000ed00 	.word	0xe000ed00

08000214 <main>:

uint16_t pwm_value = 0;
uint8_t counter = 0;

int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	init_pwm2();
 8000218:	f000 f802 	bl	8000220 <init_pwm2>

	while(1)
 800021c:	e7fe      	b.n	800021c <main+0x8>
	...

08000220 <init_pwm2>:



//PA1-CH2-TIM2-AF2
void init_pwm2(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	RCC->IOPENR |= (1U << 0); //Enable clock for GPIOA
 8000224:	4b42      	ldr	r3, [pc, #264]	; (8000330 <init_pwm2+0x110>)
 8000226:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000228:	4b41      	ldr	r3, [pc, #260]	; (8000330 <init_pwm2+0x110>)
 800022a:	2101      	movs	r1, #1
 800022c:	430a      	orrs	r2, r1
 800022e:	635a      	str	r2, [r3, #52]	; 0x34
	//PA1 alernate func.
	GPIOA->MODER &= ~(3U << 2*1);
 8000230:	23a0      	movs	r3, #160	; 0xa0
 8000232:	05db      	lsls	r3, r3, #23
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	23a0      	movs	r3, #160	; 0xa0
 8000238:	05db      	lsls	r3, r3, #23
 800023a:	210c      	movs	r1, #12
 800023c:	438a      	bics	r2, r1
 800023e:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (2U << 2*1);
 8000240:	23a0      	movs	r3, #160	; 0xa0
 8000242:	05db      	lsls	r3, r3, #23
 8000244:	681a      	ldr	r2, [r3, #0]
 8000246:	23a0      	movs	r3, #160	; 0xa0
 8000248:	05db      	lsls	r3, r3, #23
 800024a:	2108      	movs	r1, #8
 800024c:	430a      	orrs	r2, r1
 800024e:	601a      	str	r2, [r3, #0]
	//CH2 timer selected
	GPIOA->AFR[0] &= ~(0xFU << 4*1);
 8000250:	23a0      	movs	r3, #160	; 0xa0
 8000252:	05db      	lsls	r3, r3, #23
 8000254:	6a1a      	ldr	r2, [r3, #32]
 8000256:	23a0      	movs	r3, #160	; 0xa0
 8000258:	05db      	lsls	r3, r3, #23
 800025a:	21f0      	movs	r1, #240	; 0xf0
 800025c:	438a      	bics	r2, r1
 800025e:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |= (2U << 4*1); //
 8000260:	23a0      	movs	r3, #160	; 0xa0
 8000262:	05db      	lsls	r3, r3, #23
 8000264:	6a1a      	ldr	r2, [r3, #32]
 8000266:	23a0      	movs	r3, #160	; 0xa0
 8000268:	05db      	lsls	r3, r3, #23
 800026a:	2120      	movs	r1, #32
 800026c:	430a      	orrs	r2, r1
 800026e:	621a      	str	r2, [r3, #32]
	//TIM2 Enable
	RCC->APBENR1 |= (1U << 0);
 8000270:	4b2f      	ldr	r3, [pc, #188]	; (8000330 <init_pwm2+0x110>)
 8000272:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000274:	4b2e      	ldr	r3, [pc, #184]	; (8000330 <init_pwm2+0x110>)
 8000276:	2101      	movs	r1, #1
 8000278:	430a      	orrs	r2, r1
 800027a:	63da      	str	r2, [r3, #60]	; 0x3c

	TIM2-> CR1 |= 0 << 4; // Up counter en.
 800027c:	2380      	movs	r3, #128	; 0x80
 800027e:	05da      	lsls	r2, r3, #23
 8000280:	2380      	movs	r3, #128	; 0x80
 8000282:	05db      	lsls	r3, r3, #23
 8000284:	6812      	ldr	r2, [r2, #0]
 8000286:	601a      	str	r2, [r3, #0]
	TIM2-> CR1 |= 0 << 5; // center-aligned mode
 8000288:	2380      	movs	r3, #128	; 0x80
 800028a:	05da      	lsls	r2, r3, #23
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	05db      	lsls	r3, r3, #23
 8000290:	6812      	ldr	r2, [r2, #0]
 8000292:	601a      	str	r2, [r3, #0]
	TIM2-> CR1 |= 0 << 8; // timer clock division 1
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	05da      	lsls	r2, r3, #23
 8000298:	2380      	movs	r3, #128	; 0x80
 800029a:	05db      	lsls	r3, r3, #23
 800029c:	6812      	ldr	r2, [r2, #0]
 800029e:	601a      	str	r2, [r3, #0]

	TIM2->CCMR1 |= 1 << 11; // output compare 2
 80002a0:	2380      	movs	r3, #128	; 0x80
 80002a2:	05db      	lsls	r3, r3, #23
 80002a4:	699a      	ldr	r2, [r3, #24]
 80002a6:	2380      	movs	r3, #128	; 0x80
 80002a8:	05db      	lsls	r3, r3, #23
 80002aa:	2180      	movs	r1, #128	; 0x80
 80002ac:	0109      	lsls	r1, r1, #4
 80002ae:	430a      	orrs	r2, r1
 80002b0:	619a      	str	r2, [r3, #24]
	TIM2->CCMR1 |= 0 << 8;  // CC2 channel output
 80002b2:	2380      	movs	r3, #128	; 0x80
 80002b4:	05da      	lsls	r2, r3, #23
 80002b6:	2380      	movs	r3, #128	; 0x80
 80002b8:	05db      	lsls	r3, r3, #23
 80002ba:	6992      	ldr	r2, [r2, #24]
 80002bc:	619a      	str	r2, [r3, #24]
	TIM2->CCMR1 |= 6 << 12; //pwm mode 1
 80002be:	2380      	movs	r3, #128	; 0x80
 80002c0:	05db      	lsls	r3, r3, #23
 80002c2:	699a      	ldr	r2, [r3, #24]
 80002c4:	2380      	movs	r3, #128	; 0x80
 80002c6:	05db      	lsls	r3, r3, #23
 80002c8:	21c0      	movs	r1, #192	; 0xc0
 80002ca:	01c9      	lsls	r1, r1, #7
 80002cc:	430a      	orrs	r2, r1
 80002ce:	619a      	str	r2, [r3, #24]

	TIM2->CCER |= 1 << 4; // capture compare output enable
 80002d0:	2380      	movs	r3, #128	; 0x80
 80002d2:	05db      	lsls	r3, r3, #23
 80002d4:	6a1a      	ldr	r2, [r3, #32]
 80002d6:	2380      	movs	r3, #128	; 0x80
 80002d8:	05db      	lsls	r3, r3, #23
 80002da:	2110      	movs	r1, #16
 80002dc:	430a      	orrs	r2, r1
 80002de:	621a      	str	r2, [r3, #32]

	TIM2->PSC = 10;	// prescaler
 80002e0:	2380      	movs	r3, #128	; 0x80
 80002e2:	05db      	lsls	r3, r3, #23
 80002e4:	220a      	movs	r2, #10
 80002e6:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 16000; // %100 duty cycle
 80002e8:	2380      	movs	r3, #128	; 0x80
 80002ea:	05db      	lsls	r3, r3, #23
 80002ec:	22fa      	movs	r2, #250	; 0xfa
 80002ee:	0192      	lsls	r2, r2, #6
 80002f0:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCR2 = 0;		//first value 0/16000
 80002f2:	2380      	movs	r3, #128	; 0x80
 80002f4:	05db      	lsls	r3, r3, #23
 80002f6:	2200      	movs	r2, #0
 80002f8:	639a      	str	r2, [r3, #56]	; 0x38

	TIM2->DIER |= (1 << 0); //update interrupt
 80002fa:	2380      	movs	r3, #128	; 0x80
 80002fc:	05db      	lsls	r3, r3, #23
 80002fe:	68da      	ldr	r2, [r3, #12]
 8000300:	2380      	movs	r3, #128	; 0x80
 8000302:	05db      	lsls	r3, r3, #23
 8000304:	2101      	movs	r1, #1
 8000306:	430a      	orrs	r2, r1
 8000308:	60da      	str	r2, [r3, #12]

	TIM2->CR1 |= 1 << 0; //enable pwm
 800030a:	2380      	movs	r3, #128	; 0x80
 800030c:	05db      	lsls	r3, r3, #23
 800030e:	681a      	ldr	r2, [r3, #0]
 8000310:	2380      	movs	r3, #128	; 0x80
 8000312:	05db      	lsls	r3, r3, #23
 8000314:	2101      	movs	r1, #1
 8000316:	430a      	orrs	r2, r1
 8000318:	601a      	str	r2, [r3, #0]

	NVIC_SetPriority(TIM2_IRQn,1);
 800031a:	2101      	movs	r1, #1
 800031c:	200f      	movs	r0, #15
 800031e:	f7ff ff0b 	bl	8000138 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn);
 8000322:	200f      	movs	r0, #15
 8000324:	f7ff feee 	bl	8000104 <__NVIC_EnableIRQ>

}
 8000328:	46c0      	nop			; (mov r8, r8)
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
 800032e:	46c0      	nop			; (mov r8, r8)
 8000330:	40021000 	.word	0x40021000

08000334 <PWM_Value>:


void PWM_Value(){
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0

	if(pwm_value < 16000 && counter == 0)
 8000338:	4b19      	ldr	r3, [pc, #100]	; (80003a0 <PWM_Value+0x6c>)
 800033a:	881a      	ldrh	r2, [r3, #0]
 800033c:	23fa      	movs	r3, #250	; 0xfa
 800033e:	019b      	lsls	r3, r3, #6
 8000340:	429a      	cmp	r2, r3
 8000342:	d215      	bcs.n	8000370 <PWM_Value+0x3c>
 8000344:	4b17      	ldr	r3, [pc, #92]	; (80003a4 <PWM_Value+0x70>)
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d111      	bne.n	8000370 <PWM_Value+0x3c>
	{
		pwm_value  = pwm_value + 200;
 800034c:	4b14      	ldr	r3, [pc, #80]	; (80003a0 <PWM_Value+0x6c>)
 800034e:	881b      	ldrh	r3, [r3, #0]
 8000350:	33c8      	adds	r3, #200	; 0xc8
 8000352:	b29a      	uxth	r2, r3
 8000354:	4b12      	ldr	r3, [pc, #72]	; (80003a0 <PWM_Value+0x6c>)
 8000356:	801a      	strh	r2, [r3, #0]
		counter = 0;
 8000358:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <PWM_Value+0x70>)
 800035a:	2200      	movs	r2, #0
 800035c:	701a      	strb	r2, [r3, #0]
	    if(pwm_value >=16000)
 800035e:	4b10      	ldr	r3, [pc, #64]	; (80003a0 <PWM_Value+0x6c>)
 8000360:	881a      	ldrh	r2, [r3, #0]
 8000362:	23fa      	movs	r3, #250	; 0xfa
 8000364:	019b      	lsls	r3, r3, #6
 8000366:	429a      	cmp	r2, r3
 8000368:	d302      	bcc.n	8000370 <PWM_Value+0x3c>
			counter = 1;
 800036a:	4b0e      	ldr	r3, [pc, #56]	; (80003a4 <PWM_Value+0x70>)
 800036c:	2201      	movs	r2, #1
 800036e:	701a      	strb	r2, [r3, #0]
	}

	if(counter == 1)
 8000370:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <PWM_Value+0x70>)
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	2b01      	cmp	r3, #1
 8000376:	d10f      	bne.n	8000398 <PWM_Value+0x64>
	{
		pwm_value = pwm_value - 200;
 8000378:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <PWM_Value+0x6c>)
 800037a:	881b      	ldrh	r3, [r3, #0]
 800037c:	3bc8      	subs	r3, #200	; 0xc8
 800037e:	b29a      	uxth	r2, r3
 8000380:	4b07      	ldr	r3, [pc, #28]	; (80003a0 <PWM_Value+0x6c>)
 8000382:	801a      	strh	r2, [r3, #0]
		counter = 1;
 8000384:	4b07      	ldr	r3, [pc, #28]	; (80003a4 <PWM_Value+0x70>)
 8000386:	2201      	movs	r2, #1
 8000388:	701a      	strb	r2, [r3, #0]
	    if(pwm_value == 0)
 800038a:	4b05      	ldr	r3, [pc, #20]	; (80003a0 <PWM_Value+0x6c>)
 800038c:	881b      	ldrh	r3, [r3, #0]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d102      	bne.n	8000398 <PWM_Value+0x64>
	    	counter = 0;
 8000392:	4b04      	ldr	r3, [pc, #16]	; (80003a4 <PWM_Value+0x70>)
 8000394:	2200      	movs	r2, #0
 8000396:	701a      	strb	r2, [r3, #0]
	}
}
 8000398:	46c0      	nop			; (mov r8, r8)
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	46c0      	nop			; (mov r8, r8)
 80003a0:	2000001c 	.word	0x2000001c
 80003a4:	2000001e 	.word	0x2000001e

080003a8 <TIM2_IRQHandler>:


void TIM2_IRQHandler()
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
	PWM_Value();	//pwm value function
 80003ac:	f7ff ffc2 	bl	8000334 <PWM_Value>
	TIM2-> CCR2 = pwm_value; //duty cycle setting
 80003b0:	4b03      	ldr	r3, [pc, #12]	; (80003c0 <TIM2_IRQHandler+0x18>)
 80003b2:	881a      	ldrh	r2, [r3, #0]
 80003b4:	2380      	movs	r3, #128	; 0x80
 80003b6:	05db      	lsls	r3, r3, #23
 80003b8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80003ba:	46c0      	nop			; (mov r8, r8)
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	2000001c 	.word	0x2000001c

080003c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003c4:	480d      	ldr	r0, [pc, #52]	; (80003fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003c6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80003c8:	f000 f826 	bl	8000418 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003cc:	480c      	ldr	r0, [pc, #48]	; (8000400 <LoopForever+0x6>)
  ldr r1, =_edata
 80003ce:	490d      	ldr	r1, [pc, #52]	; (8000404 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003d0:	4a0d      	ldr	r2, [pc, #52]	; (8000408 <LoopForever+0xe>)
  movs r3, #0
 80003d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003d4:	e002      	b.n	80003dc <LoopCopyDataInit>

080003d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003da:	3304      	adds	r3, #4

080003dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003e0:	d3f9      	bcc.n	80003d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003e2:	4a0a      	ldr	r2, [pc, #40]	; (800040c <LoopForever+0x12>)
  ldr r4, =_ebss
 80003e4:	4c0a      	ldr	r4, [pc, #40]	; (8000410 <LoopForever+0x16>)
  movs r3, #0
 80003e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003e8:	e001      	b.n	80003ee <LoopFillZerobss>

080003ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003ec:	3204      	adds	r2, #4

080003ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003f0:	d3fb      	bcc.n	80003ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003f2:	f000 f81d 	bl	8000430 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003f6:	f7ff ff0d 	bl	8000214 <main>

080003fa <LoopForever>:

LoopForever:
    b LoopForever
 80003fa:	e7fe      	b.n	80003fa <LoopForever>
  ldr   r0, =_estack
 80003fc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000404:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000408:	08000498 	.word	0x08000498
  ldr r2, =_sbss
 800040c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000410:	20000020 	.word	0x20000020

08000414 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000414:	e7fe      	b.n	8000414 <ADC_COMP_IRQHandler>
	...

08000418 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800041c:	4b03      	ldr	r3, [pc, #12]	; (800042c <SystemInit+0x14>)
 800041e:	2280      	movs	r2, #128	; 0x80
 8000420:	0512      	lsls	r2, r2, #20
 8000422:	609a      	str	r2, [r3, #8]
#endif
}
 8000424:	46c0      	nop			; (mov r8, r8)
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	e000ed00 	.word	0xe000ed00

08000430 <__libc_init_array>:
 8000430:	b570      	push	{r4, r5, r6, lr}
 8000432:	2600      	movs	r6, #0
 8000434:	4d0c      	ldr	r5, [pc, #48]	; (8000468 <__libc_init_array+0x38>)
 8000436:	4c0d      	ldr	r4, [pc, #52]	; (800046c <__libc_init_array+0x3c>)
 8000438:	1b64      	subs	r4, r4, r5
 800043a:	10a4      	asrs	r4, r4, #2
 800043c:	42a6      	cmp	r6, r4
 800043e:	d109      	bne.n	8000454 <__libc_init_array+0x24>
 8000440:	2600      	movs	r6, #0
 8000442:	f000 f819 	bl	8000478 <_init>
 8000446:	4d0a      	ldr	r5, [pc, #40]	; (8000470 <__libc_init_array+0x40>)
 8000448:	4c0a      	ldr	r4, [pc, #40]	; (8000474 <__libc_init_array+0x44>)
 800044a:	1b64      	subs	r4, r4, r5
 800044c:	10a4      	asrs	r4, r4, #2
 800044e:	42a6      	cmp	r6, r4
 8000450:	d105      	bne.n	800045e <__libc_init_array+0x2e>
 8000452:	bd70      	pop	{r4, r5, r6, pc}
 8000454:	00b3      	lsls	r3, r6, #2
 8000456:	58eb      	ldr	r3, [r5, r3]
 8000458:	4798      	blx	r3
 800045a:	3601      	adds	r6, #1
 800045c:	e7ee      	b.n	800043c <__libc_init_array+0xc>
 800045e:	00b3      	lsls	r3, r6, #2
 8000460:	58eb      	ldr	r3, [r5, r3]
 8000462:	4798      	blx	r3
 8000464:	3601      	adds	r6, #1
 8000466:	e7f2      	b.n	800044e <__libc_init_array+0x1e>
 8000468:	08000490 	.word	0x08000490
 800046c:	08000490 	.word	0x08000490
 8000470:	08000490 	.word	0x08000490
 8000474:	08000494 	.word	0x08000494

08000478 <_init>:
 8000478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800047e:	bc08      	pop	{r3}
 8000480:	469e      	mov	lr, r3
 8000482:	4770      	bx	lr

08000484 <_fini>:
 8000484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800048a:	bc08      	pop	{r3}
 800048c:	469e      	mov	lr, r3
 800048e:	4770      	bx	lr
