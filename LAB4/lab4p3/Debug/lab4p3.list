
lab4p3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009e8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000aa4  08000aa4  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000aa4  08000aa4  00010aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000aa8  08000aa8  00010aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  08000aac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000002c  20000008  08000ab4  00020008  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000034  08000ab4  00020034  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000dc4  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000003b0  00000000  00000000  00020df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000000d0  00000000  00000000  000211a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000000a8  00000000  00000000  00021278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   00000921  00000000  00000000  00021320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    000006ad  00000000  00000000  00021c41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .comment      00000050  00000000  00000000  000222ee  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000022c  00000000  00000000  00022340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000008 	.word	0x20000008
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08000a8c 	.word	0x08000a8c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000000c 	.word	0x2000000c
 8000100:	08000a8c 	.word	0x08000a8c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b7f      	cmp	r3, #127	; 0x7f
 800022e:	d809      	bhi.n	8000244 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	001a      	movs	r2, r3
 8000236:	231f      	movs	r3, #31
 8000238:	401a      	ands	r2, r3
 800023a:	4b04      	ldr	r3, [pc, #16]	; (800024c <__NVIC_EnableIRQ+0x30>)
 800023c:	2101      	movs	r1, #1
 800023e:	4091      	lsls	r1, r2
 8000240:	000a      	movs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
  }
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e100 	.word	0xe000e100

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b7f      	cmp	r3, #127	; 0x7f
 8000264:	d828      	bhi.n	80002b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000266:	4a2f      	ldr	r2, [pc, #188]	; (8000324 <__NVIC_SetPriority+0xd4>)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b25b      	sxtb	r3, r3
 800026e:	089b      	lsrs	r3, r3, #2
 8000270:	33c0      	adds	r3, #192	; 0xc0
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	589b      	ldr	r3, [r3, r2]
 8000276:	1dfa      	adds	r2, r7, #7
 8000278:	7812      	ldrb	r2, [r2, #0]
 800027a:	0011      	movs	r1, r2
 800027c:	2203      	movs	r2, #3
 800027e:	400a      	ands	r2, r1
 8000280:	00d2      	lsls	r2, r2, #3
 8000282:	21ff      	movs	r1, #255	; 0xff
 8000284:	4091      	lsls	r1, r2
 8000286:	000a      	movs	r2, r1
 8000288:	43d2      	mvns	r2, r2
 800028a:	401a      	ands	r2, r3
 800028c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	019b      	lsls	r3, r3, #6
 8000292:	22ff      	movs	r2, #255	; 0xff
 8000294:	401a      	ands	r2, r3
 8000296:	1dfb      	adds	r3, r7, #7
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	0018      	movs	r0, r3
 800029c:	2303      	movs	r3, #3
 800029e:	4003      	ands	r3, r0
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a4:	481f      	ldr	r0, [pc, #124]	; (8000324 <__NVIC_SetPriority+0xd4>)
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	089b      	lsrs	r3, r3, #2
 80002ae:	430a      	orrs	r2, r1
 80002b0:	33c0      	adds	r3, #192	; 0xc0
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002b6:	e031      	b.n	800031c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <__NVIC_SetPriority+0xd8>)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	0019      	movs	r1, r3
 80002c0:	230f      	movs	r3, #15
 80002c2:	400b      	ands	r3, r1
 80002c4:	3b08      	subs	r3, #8
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	3306      	adds	r3, #6
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	18d3      	adds	r3, r2, r3
 80002ce:	3304      	adds	r3, #4
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1dfa      	adds	r2, r7, #7
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	0011      	movs	r1, r2
 80002d8:	2203      	movs	r2, #3
 80002da:	400a      	ands	r2, r1
 80002dc:	00d2      	lsls	r2, r2, #3
 80002de:	21ff      	movs	r1, #255	; 0xff
 80002e0:	4091      	lsls	r1, r2
 80002e2:	000a      	movs	r2, r1
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	401a      	ands	r2, r3
 80002e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	22ff      	movs	r2, #255	; 0xff
 80002f0:	401a      	ands	r2, r3
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	0018      	movs	r0, r3
 80002f8:	2303      	movs	r3, #3
 80002fa:	4003      	ands	r3, r0
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <__NVIC_SetPriority+0xd8>)
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	001c      	movs	r4, r3
 8000308:	230f      	movs	r3, #15
 800030a:	4023      	ands	r3, r4
 800030c:	3b08      	subs	r3, #8
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	3306      	adds	r3, #6
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	18c3      	adds	r3, r0, r3
 8000318:	3304      	adds	r3, #4
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b003      	add	sp, #12
 8000322:	bd90      	pop	{r4, r7, pc}
 8000324:	e000e100 	.word	0xe000e100
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <main>:
char key_value_2 = '0';
uint8_t password = 0;
void read_Key(void);


int main(void) {
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0

	GPIO_Config();
 8000330:	f000 f808 	bl	8000344 <GPIO_Config>
	USART_Config(9600);
 8000334:	2396      	movs	r3, #150	; 0x96
 8000336:	019b      	lsls	r3, r3, #6
 8000338:	0018      	movs	r0, r3
 800033a:	f000 f91d 	bl	8000578 <USART_Config>
	init_pwm2();
 800033e:	f000 f94b 	bl	80005d8 <init_pwm2>

	while(1) {
 8000342:	e7fe      	b.n	8000342 <main+0x16>

08000344 <GPIO_Config>:
    }

    return 0;
}

void GPIO_Config(void){
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
	RCC->IOPENR |= (1U << 0); //Enable clock for GPIOA
 8000348:	4b76      	ldr	r3, [pc, #472]	; (8000524 <GPIO_Config+0x1e0>)
 800034a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800034c:	4b75      	ldr	r3, [pc, #468]	; (8000524 <GPIO_Config+0x1e0>)
 800034e:	2101      	movs	r1, #1
 8000350:	430a      	orrs	r2, r1
 8000352:	635a      	str	r2, [r3, #52]	; 0x34
	RCC->IOPENR |= (1U << 1); //Enable clock for GPIOB
 8000354:	4b73      	ldr	r3, [pc, #460]	; (8000524 <GPIO_Config+0x1e0>)
 8000356:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000358:	4b72      	ldr	r3, [pc, #456]	; (8000524 <GPIO_Config+0x1e0>)
 800035a:	2102      	movs	r1, #2
 800035c:	430a      	orrs	r2, r1
 800035e:	635a      	str	r2, [r3, #52]	; 0x34
	RCC->APBENR1 |= (1U << 17); //Enable clock for USART2
 8000360:	4b70      	ldr	r3, [pc, #448]	; (8000524 <GPIO_Config+0x1e0>)
 8000362:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000364:	4b6f      	ldr	r3, [pc, #444]	; (8000524 <GPIO_Config+0x1e0>)
 8000366:	2180      	movs	r1, #128	; 0x80
 8000368:	0289      	lsls	r1, r1, #10
 800036a:	430a      	orrs	r2, r1
 800036c:	63da      	str	r2, [r3, #60]	; 0x3c

	GPIOA->MODER &= ~(3U << 2*2); //PA2 USART
 800036e:	23a0      	movs	r3, #160	; 0xa0
 8000370:	05db      	lsls	r3, r3, #23
 8000372:	681a      	ldr	r2, [r3, #0]
 8000374:	23a0      	movs	r3, #160	; 0xa0
 8000376:	05db      	lsls	r3, r3, #23
 8000378:	2130      	movs	r1, #48	; 0x30
 800037a:	438a      	bics	r2, r1
 800037c:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (2U << 2*2);
 800037e:	23a0      	movs	r3, #160	; 0xa0
 8000380:	05db      	lsls	r3, r3, #23
 8000382:	681a      	ldr	r2, [r3, #0]
 8000384:	23a0      	movs	r3, #160	; 0xa0
 8000386:	05db      	lsls	r3, r3, #23
 8000388:	2120      	movs	r1, #32
 800038a:	430a      	orrs	r2, r1
 800038c:	601a      	str	r2, [r3, #0]

	GPIOA->AFR[0] &= ~(0xFU << 4*2);
 800038e:	23a0      	movs	r3, #160	; 0xa0
 8000390:	05db      	lsls	r3, r3, #23
 8000392:	6a1a      	ldr	r2, [r3, #32]
 8000394:	23a0      	movs	r3, #160	; 0xa0
 8000396:	05db      	lsls	r3, r3, #23
 8000398:	4963      	ldr	r1, [pc, #396]	; (8000528 <GPIO_Config+0x1e4>)
 800039a:	400a      	ands	r2, r1
 800039c:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |= (1 << 4*2);
 800039e:	23a0      	movs	r3, #160	; 0xa0
 80003a0:	05db      	lsls	r3, r3, #23
 80003a2:	6a1a      	ldr	r2, [r3, #32]
 80003a4:	23a0      	movs	r3, #160	; 0xa0
 80003a6:	05db      	lsls	r3, r3, #23
 80003a8:	2180      	movs	r1, #128	; 0x80
 80003aa:	0049      	lsls	r1, r1, #1
 80003ac:	430a      	orrs	r2, r1
 80003ae:	621a      	str	r2, [r3, #32]

	GPIOA->MODER &= ~(0xFU << 2*3); //PA3 USART
 80003b0:	23a0      	movs	r3, #160	; 0xa0
 80003b2:	05db      	lsls	r3, r3, #23
 80003b4:	681a      	ldr	r2, [r3, #0]
 80003b6:	23a0      	movs	r3, #160	; 0xa0
 80003b8:	05db      	lsls	r3, r3, #23
 80003ba:	495c      	ldr	r1, [pc, #368]	; (800052c <GPIO_Config+0x1e8>)
 80003bc:	400a      	ands	r2, r1
 80003be:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (2U << 2*3);
 80003c0:	23a0      	movs	r3, #160	; 0xa0
 80003c2:	05db      	lsls	r3, r3, #23
 80003c4:	681a      	ldr	r2, [r3, #0]
 80003c6:	23a0      	movs	r3, #160	; 0xa0
 80003c8:	05db      	lsls	r3, r3, #23
 80003ca:	2180      	movs	r1, #128	; 0x80
 80003cc:	430a      	orrs	r2, r1
 80003ce:	601a      	str	r2, [r3, #0]

	GPIOA->AFR[0] &= ~(0xFU << 4*3);
 80003d0:	23a0      	movs	r3, #160	; 0xa0
 80003d2:	05db      	lsls	r3, r3, #23
 80003d4:	6a1a      	ldr	r2, [r3, #32]
 80003d6:	23a0      	movs	r3, #160	; 0xa0
 80003d8:	05db      	lsls	r3, r3, #23
 80003da:	4955      	ldr	r1, [pc, #340]	; (8000530 <GPIO_Config+0x1ec>)
 80003dc:	400a      	ands	r2, r1
 80003de:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |= (1 << 4*3);
 80003e0:	23a0      	movs	r3, #160	; 0xa0
 80003e2:	05db      	lsls	r3, r3, #23
 80003e4:	6a1a      	ldr	r2, [r3, #32]
 80003e6:	23a0      	movs	r3, #160	; 0xa0
 80003e8:	05db      	lsls	r3, r3, #23
 80003ea:	2180      	movs	r1, #128	; 0x80
 80003ec:	0149      	lsls	r1, r1, #5
 80003ee:	430a      	orrs	r2, r1
 80003f0:	621a      	str	r2, [r3, #32]

	GPIOB->MODER &= ~(3U << 2*1); // PB1 output
 80003f2:	4b50      	ldr	r3, [pc, #320]	; (8000534 <GPIO_Config+0x1f0>)
 80003f4:	681a      	ldr	r2, [r3, #0]
 80003f6:	4b4f      	ldr	r3, [pc, #316]	; (8000534 <GPIO_Config+0x1f0>)
 80003f8:	210c      	movs	r1, #12
 80003fa:	438a      	bics	r2, r1
 80003fc:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (1U << 2*1);
 80003fe:	4b4d      	ldr	r3, [pc, #308]	; (8000534 <GPIO_Config+0x1f0>)
 8000400:	681a      	ldr	r2, [r3, #0]
 8000402:	4b4c      	ldr	r3, [pc, #304]	; (8000534 <GPIO_Config+0x1f0>)
 8000404:	2104      	movs	r1, #4
 8000406:	430a      	orrs	r2, r1
 8000408:	601a      	str	r2, [r3, #0]

	GPIOB->MODER &= ~(3U << 2*2); // PB2 output
 800040a:	4b4a      	ldr	r3, [pc, #296]	; (8000534 <GPIO_Config+0x1f0>)
 800040c:	681a      	ldr	r2, [r3, #0]
 800040e:	4b49      	ldr	r3, [pc, #292]	; (8000534 <GPIO_Config+0x1f0>)
 8000410:	2130      	movs	r1, #48	; 0x30
 8000412:	438a      	bics	r2, r1
 8000414:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (1U << 2*2);
 8000416:	4b47      	ldr	r3, [pc, #284]	; (8000534 <GPIO_Config+0x1f0>)
 8000418:	681a      	ldr	r2, [r3, #0]
 800041a:	4b46      	ldr	r3, [pc, #280]	; (8000534 <GPIO_Config+0x1f0>)
 800041c:	2110      	movs	r1, #16
 800041e:	430a      	orrs	r2, r1
 8000420:	601a      	str	r2, [r3, #0]

	GPIOB->MODER &= ~(3U << 2*3); // PB3 output
 8000422:	4b44      	ldr	r3, [pc, #272]	; (8000534 <GPIO_Config+0x1f0>)
 8000424:	681a      	ldr	r2, [r3, #0]
 8000426:	4b43      	ldr	r3, [pc, #268]	; (8000534 <GPIO_Config+0x1f0>)
 8000428:	21c0      	movs	r1, #192	; 0xc0
 800042a:	438a      	bics	r2, r1
 800042c:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (1U << 2*3);
 800042e:	4b41      	ldr	r3, [pc, #260]	; (8000534 <GPIO_Config+0x1f0>)
 8000430:	681a      	ldr	r2, [r3, #0]
 8000432:	4b40      	ldr	r3, [pc, #256]	; (8000534 <GPIO_Config+0x1f0>)
 8000434:	2140      	movs	r1, #64	; 0x40
 8000436:	430a      	orrs	r2, r1
 8000438:	601a      	str	r2, [r3, #0]

	GPIOB->MODER &= ~(3U << 2*4); // PB4 output
 800043a:	4b3e      	ldr	r3, [pc, #248]	; (8000534 <GPIO_Config+0x1f0>)
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	4b3d      	ldr	r3, [pc, #244]	; (8000534 <GPIO_Config+0x1f0>)
 8000440:	493d      	ldr	r1, [pc, #244]	; (8000538 <GPIO_Config+0x1f4>)
 8000442:	400a      	ands	r2, r1
 8000444:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (1U << 2*4);
 8000446:	4b3b      	ldr	r3, [pc, #236]	; (8000534 <GPIO_Config+0x1f0>)
 8000448:	681a      	ldr	r2, [r3, #0]
 800044a:	4b3a      	ldr	r3, [pc, #232]	; (8000534 <GPIO_Config+0x1f0>)
 800044c:	2180      	movs	r1, #128	; 0x80
 800044e:	0049      	lsls	r1, r1, #1
 8000450:	430a      	orrs	r2, r1
 8000452:	601a      	str	r2, [r3, #0]

    GPIOA->MODER &= ~(3U << 2*4); // PA4 input
 8000454:	23a0      	movs	r3, #160	; 0xa0
 8000456:	05db      	lsls	r3, r3, #23
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	23a0      	movs	r3, #160	; 0xa0
 800045c:	05db      	lsls	r3, r3, #23
 800045e:	4936      	ldr	r1, [pc, #216]	; (8000538 <GPIO_Config+0x1f4>)
 8000460:	400a      	ands	r2, r1
 8000462:	601a      	str	r2, [r3, #0]
    GPIOA->MODER &= ~(3U << 2*5); // PA5 input
 8000464:	23a0      	movs	r3, #160	; 0xa0
 8000466:	05db      	lsls	r3, r3, #23
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	23a0      	movs	r3, #160	; 0xa0
 800046c:	05db      	lsls	r3, r3, #23
 800046e:	4933      	ldr	r1, [pc, #204]	; (800053c <GPIO_Config+0x1f8>)
 8000470:	400a      	ands	r2, r1
 8000472:	601a      	str	r2, [r3, #0]
    GPIOA->MODER &= ~(3U << 2*6); // PA6 input
 8000474:	23a0      	movs	r3, #160	; 0xa0
 8000476:	05db      	lsls	r3, r3, #23
 8000478:	681a      	ldr	r2, [r3, #0]
 800047a:	23a0      	movs	r3, #160	; 0xa0
 800047c:	05db      	lsls	r3, r3, #23
 800047e:	4930      	ldr	r1, [pc, #192]	; (8000540 <GPIO_Config+0x1fc>)
 8000480:	400a      	ands	r2, r1
 8000482:	601a      	str	r2, [r3, #0]
    GPIOA->MODER &= ~(3U << 2*7); // PA7 input
 8000484:	23a0      	movs	r3, #160	; 0xa0
 8000486:	05db      	lsls	r3, r3, #23
 8000488:	681a      	ldr	r2, [r3, #0]
 800048a:	23a0      	movs	r3, #160	; 0xa0
 800048c:	05db      	lsls	r3, r3, #23
 800048e:	492d      	ldr	r1, [pc, #180]	; (8000544 <GPIO_Config+0x200>)
 8000490:	400a      	ands	r2, r1
 8000492:	601a      	str	r2, [r3, #0]

    GPIOA->PUPDR &= ~(3U << 2*4); //reset bits
 8000494:	23a0      	movs	r3, #160	; 0xa0
 8000496:	05db      	lsls	r3, r3, #23
 8000498:	68da      	ldr	r2, [r3, #12]
 800049a:	23a0      	movs	r3, #160	; 0xa0
 800049c:	05db      	lsls	r3, r3, #23
 800049e:	4926      	ldr	r1, [pc, #152]	; (8000538 <GPIO_Config+0x1f4>)
 80004a0:	400a      	ands	r2, r1
 80004a2:	60da      	str	r2, [r3, #12]
    GPIOA->PUPDR &= ~(3U << 2*5);
 80004a4:	23a0      	movs	r3, #160	; 0xa0
 80004a6:	05db      	lsls	r3, r3, #23
 80004a8:	68da      	ldr	r2, [r3, #12]
 80004aa:	23a0      	movs	r3, #160	; 0xa0
 80004ac:	05db      	lsls	r3, r3, #23
 80004ae:	4923      	ldr	r1, [pc, #140]	; (800053c <GPIO_Config+0x1f8>)
 80004b0:	400a      	ands	r2, r1
 80004b2:	60da      	str	r2, [r3, #12]
	GPIOA->PUPDR &= ~(3U << 2*6);
 80004b4:	23a0      	movs	r3, #160	; 0xa0
 80004b6:	05db      	lsls	r3, r3, #23
 80004b8:	68da      	ldr	r2, [r3, #12]
 80004ba:	23a0      	movs	r3, #160	; 0xa0
 80004bc:	05db      	lsls	r3, r3, #23
 80004be:	4920      	ldr	r1, [pc, #128]	; (8000540 <GPIO_Config+0x1fc>)
 80004c0:	400a      	ands	r2, r1
 80004c2:	60da      	str	r2, [r3, #12]
	GPIOA->PUPDR &= ~(3U << 2*7);
 80004c4:	23a0      	movs	r3, #160	; 0xa0
 80004c6:	05db      	lsls	r3, r3, #23
 80004c8:	68da      	ldr	r2, [r3, #12]
 80004ca:	23a0      	movs	r3, #160	; 0xa0
 80004cc:	05db      	lsls	r3, r3, #23
 80004ce:	491d      	ldr	r1, [pc, #116]	; (8000544 <GPIO_Config+0x200>)
 80004d0:	400a      	ands	r2, r1
 80004d2:	60da      	str	r2, [r3, #12]

    GPIOA->PUPDR |= (1U << 2*4); //Pull Up Resistor Active
 80004d4:	23a0      	movs	r3, #160	; 0xa0
 80004d6:	05db      	lsls	r3, r3, #23
 80004d8:	68da      	ldr	r2, [r3, #12]
 80004da:	23a0      	movs	r3, #160	; 0xa0
 80004dc:	05db      	lsls	r3, r3, #23
 80004de:	2180      	movs	r1, #128	; 0x80
 80004e0:	0049      	lsls	r1, r1, #1
 80004e2:	430a      	orrs	r2, r1
 80004e4:	60da      	str	r2, [r3, #12]
    GPIOA->PUPDR |= (1U << 2*5);
 80004e6:	23a0      	movs	r3, #160	; 0xa0
 80004e8:	05db      	lsls	r3, r3, #23
 80004ea:	68da      	ldr	r2, [r3, #12]
 80004ec:	23a0      	movs	r3, #160	; 0xa0
 80004ee:	05db      	lsls	r3, r3, #23
 80004f0:	2180      	movs	r1, #128	; 0x80
 80004f2:	00c9      	lsls	r1, r1, #3
 80004f4:	430a      	orrs	r2, r1
 80004f6:	60da      	str	r2, [r3, #12]
    GPIOA->PUPDR |= (1U << 2*6);
 80004f8:	23a0      	movs	r3, #160	; 0xa0
 80004fa:	05db      	lsls	r3, r3, #23
 80004fc:	68da      	ldr	r2, [r3, #12]
 80004fe:	23a0      	movs	r3, #160	; 0xa0
 8000500:	05db      	lsls	r3, r3, #23
 8000502:	2180      	movs	r1, #128	; 0x80
 8000504:	0149      	lsls	r1, r1, #5
 8000506:	430a      	orrs	r2, r1
 8000508:	60da      	str	r2, [r3, #12]
    GPIOA->PUPDR |= (1U << 2*7);
 800050a:	23a0      	movs	r3, #160	; 0xa0
 800050c:	05db      	lsls	r3, r3, #23
 800050e:	68da      	ldr	r2, [r3, #12]
 8000510:	23a0      	movs	r3, #160	; 0xa0
 8000512:	05db      	lsls	r3, r3, #23
 8000514:	2180      	movs	r1, #128	; 0x80
 8000516:	01c9      	lsls	r1, r1, #7
 8000518:	430a      	orrs	r2, r1
 800051a:	60da      	str	r2, [r3, #12]

}
 800051c:	46c0      	nop			; (mov r8, r8)
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	40021000 	.word	0x40021000
 8000528:	fffff0ff 	.word	0xfffff0ff
 800052c:	fffffc3f 	.word	0xfffffc3f
 8000530:	ffff0fff 	.word	0xffff0fff
 8000534:	50000400 	.word	0x50000400
 8000538:	fffffcff 	.word	0xfffffcff
 800053c:	fffff3ff 	.word	0xfffff3ff
 8000540:	ffffcfff 	.word	0xffffcfff
 8000544:	ffff3fff 	.word	0xffff3fff

08000548 <printChar>:
	for(int i=0; i<len ; ++i){
			printChar(ptr[i]);
		}
}

void printChar(uint8_t c){
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	0002      	movs	r2, r0
 8000550:	1dfb      	adds	r3, r7, #7
 8000552:	701a      	strb	r2, [r3, #0]
	USART2->TDR = (uint16_t) c;
 8000554:	4b07      	ldr	r3, [pc, #28]	; (8000574 <printChar+0x2c>)
 8000556:	1dfa      	adds	r2, r7, #7
 8000558:	7812      	ldrb	r2, [r2, #0]
 800055a:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USART2->ISR & (1 << 6))); // 6.bit transmission complete
 800055c:	46c0      	nop			; (mov r8, r8)
 800055e:	4b05      	ldr	r3, [pc, #20]	; (8000574 <printChar+0x2c>)
 8000560:	69db      	ldr	r3, [r3, #28]
 8000562:	2240      	movs	r2, #64	; 0x40
 8000564:	4013      	ands	r3, r2
 8000566:	d0fa      	beq.n	800055e <printChar+0x16>
}
 8000568:	46c0      	nop			; (mov r8, r8)
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	46bd      	mov	sp, r7
 800056e:	b002      	add	sp, #8
 8000570:	bd80      	pop	{r7, pc}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	40004400 	.word	0x40004400

08000578 <USART_Config>:
	return (uint8_t)USART2->RDR;
	//RXNE is automatically cleared when read
}


void USART_Config(uint16_t baud){
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	0002      	movs	r2, r0
 8000580:	1dbb      	adds	r3, r7, #6
 8000582:	801a      	strh	r2, [r3, #0]
	USART2->CR1 = 0;
 8000584:	4b12      	ldr	r3, [pc, #72]	; (80005d0 <USART_Config+0x58>)
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
	USART2->CR1 |= (1U << 2); //USART1 receiver enable
 800058a:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <USART_Config+0x58>)
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <USART_Config+0x58>)
 8000590:	2104      	movs	r1, #4
 8000592:	430a      	orrs	r2, r1
 8000594:	601a      	str	r2, [r3, #0]
	USART2->CR1 |= (1U << 3); //USART1 transmitter enable
 8000596:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <USART_Config+0x58>)
 8000598:	681a      	ldr	r2, [r3, #0]
 800059a:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <USART_Config+0x58>)
 800059c:	2108      	movs	r1, #8
 800059e:	430a      	orrs	r2, r1
 80005a0:	601a      	str	r2, [r3, #0]
	//USART2->CR1 |= (1U << 5); //RX Interrupt enable

	USART2->BRR  = (uint16_t)(SystemCoreClock / baud); //Setting baudrate
 80005a2:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <USART_Config+0x5c>)
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	1dbb      	adds	r3, r7, #6
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	0019      	movs	r1, r3
 80005ac:	0010      	movs	r0, r2
 80005ae:	f7ff fda9 	bl	8000104 <__udivsi3>
 80005b2:	0003      	movs	r3, r0
 80005b4:	b29a      	uxth	r2, r3
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <USART_Config+0x58>)
 80005b8:	60da      	str	r2, [r3, #12]

	USART2->CR1 |= (1U << 0); //USART2 enable
 80005ba:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <USART_Config+0x58>)
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <USART_Config+0x58>)
 80005c0:	2101      	movs	r1, #1
 80005c2:	430a      	orrs	r2, r1
 80005c4:	601a      	str	r2, [r3, #0]

	//NVIC_SetPriority(USART2_IRQn , 1);
	//NVIC_EnableIRQ(USART2_IRQn);

}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	b002      	add	sp, #8
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	40004400 	.word	0x40004400
 80005d4:	20000004 	.word	0x20000004

080005d8 <init_pwm2>:


//PA1-CH2-TIM2-AF2
void init_pwm2(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	RCC->IOPENR |= (1U << 0); //Enable clock for GPIOA
 80005dc:	4b42      	ldr	r3, [pc, #264]	; (80006e8 <init_pwm2+0x110>)
 80005de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005e0:	4b41      	ldr	r3, [pc, #260]	; (80006e8 <init_pwm2+0x110>)
 80005e2:	2101      	movs	r1, #1
 80005e4:	430a      	orrs	r2, r1
 80005e6:	635a      	str	r2, [r3, #52]	; 0x34
	//PA1 alernate func.
	GPIOA->MODER &= ~(3U << 2*1);
 80005e8:	23a0      	movs	r3, #160	; 0xa0
 80005ea:	05db      	lsls	r3, r3, #23
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	23a0      	movs	r3, #160	; 0xa0
 80005f0:	05db      	lsls	r3, r3, #23
 80005f2:	210c      	movs	r1, #12
 80005f4:	438a      	bics	r2, r1
 80005f6:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (2U << 2*1);
 80005f8:	23a0      	movs	r3, #160	; 0xa0
 80005fa:	05db      	lsls	r3, r3, #23
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	23a0      	movs	r3, #160	; 0xa0
 8000600:	05db      	lsls	r3, r3, #23
 8000602:	2108      	movs	r1, #8
 8000604:	430a      	orrs	r2, r1
 8000606:	601a      	str	r2, [r3, #0]
	//CH2 timer selected
	GPIOA->AFR[0] &= ~(0xFU << 4*1);
 8000608:	23a0      	movs	r3, #160	; 0xa0
 800060a:	05db      	lsls	r3, r3, #23
 800060c:	6a1a      	ldr	r2, [r3, #32]
 800060e:	23a0      	movs	r3, #160	; 0xa0
 8000610:	05db      	lsls	r3, r3, #23
 8000612:	21f0      	movs	r1, #240	; 0xf0
 8000614:	438a      	bics	r2, r1
 8000616:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |= (2U << 4*1);
 8000618:	23a0      	movs	r3, #160	; 0xa0
 800061a:	05db      	lsls	r3, r3, #23
 800061c:	6a1a      	ldr	r2, [r3, #32]
 800061e:	23a0      	movs	r3, #160	; 0xa0
 8000620:	05db      	lsls	r3, r3, #23
 8000622:	2120      	movs	r1, #32
 8000624:	430a      	orrs	r2, r1
 8000626:	621a      	str	r2, [r3, #32]
	//TIM2 Enable
	RCC->APBENR1 |= (1U << 0);
 8000628:	4b2f      	ldr	r3, [pc, #188]	; (80006e8 <init_pwm2+0x110>)
 800062a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800062c:	4b2e      	ldr	r3, [pc, #184]	; (80006e8 <init_pwm2+0x110>)
 800062e:	2101      	movs	r1, #1
 8000630:	430a      	orrs	r2, r1
 8000632:	63da      	str	r2, [r3, #60]	; 0x3c

	TIM2-> CR1 |= 0 << 4; // Up counter en.
 8000634:	2380      	movs	r3, #128	; 0x80
 8000636:	05da      	lsls	r2, r3, #23
 8000638:	2380      	movs	r3, #128	; 0x80
 800063a:	05db      	lsls	r3, r3, #23
 800063c:	6812      	ldr	r2, [r2, #0]
 800063e:	601a      	str	r2, [r3, #0]
	TIM2-> CR1 |= 0 << 5; // center-aligned mode
 8000640:	2380      	movs	r3, #128	; 0x80
 8000642:	05da      	lsls	r2, r3, #23
 8000644:	2380      	movs	r3, #128	; 0x80
 8000646:	05db      	lsls	r3, r3, #23
 8000648:	6812      	ldr	r2, [r2, #0]
 800064a:	601a      	str	r2, [r3, #0]
	TIM2-> CR1 |= 0 << 8; // timer clock division 1
 800064c:	2380      	movs	r3, #128	; 0x80
 800064e:	05da      	lsls	r2, r3, #23
 8000650:	2380      	movs	r3, #128	; 0x80
 8000652:	05db      	lsls	r3, r3, #23
 8000654:	6812      	ldr	r2, [r2, #0]
 8000656:	601a      	str	r2, [r3, #0]

	TIM2->CCMR1 |= 1 << 11; // output compare 2
 8000658:	2380      	movs	r3, #128	; 0x80
 800065a:	05db      	lsls	r3, r3, #23
 800065c:	699a      	ldr	r2, [r3, #24]
 800065e:	2380      	movs	r3, #128	; 0x80
 8000660:	05db      	lsls	r3, r3, #23
 8000662:	2180      	movs	r1, #128	; 0x80
 8000664:	0109      	lsls	r1, r1, #4
 8000666:	430a      	orrs	r2, r1
 8000668:	619a      	str	r2, [r3, #24]
	TIM2->CCMR1 |= 0 << 8;  // CC2 channel output
 800066a:	2380      	movs	r3, #128	; 0x80
 800066c:	05da      	lsls	r2, r3, #23
 800066e:	2380      	movs	r3, #128	; 0x80
 8000670:	05db      	lsls	r3, r3, #23
 8000672:	6992      	ldr	r2, [r2, #24]
 8000674:	619a      	str	r2, [r3, #24]
	TIM2->CCMR1 |= 6 << 12; //pwm mode 1
 8000676:	2380      	movs	r3, #128	; 0x80
 8000678:	05db      	lsls	r3, r3, #23
 800067a:	699a      	ldr	r2, [r3, #24]
 800067c:	2380      	movs	r3, #128	; 0x80
 800067e:	05db      	lsls	r3, r3, #23
 8000680:	21c0      	movs	r1, #192	; 0xc0
 8000682:	01c9      	lsls	r1, r1, #7
 8000684:	430a      	orrs	r2, r1
 8000686:	619a      	str	r2, [r3, #24]

	TIM2->CCER |= 1 << 4; // capture compare output enable
 8000688:	2380      	movs	r3, #128	; 0x80
 800068a:	05db      	lsls	r3, r3, #23
 800068c:	6a1a      	ldr	r2, [r3, #32]
 800068e:	2380      	movs	r3, #128	; 0x80
 8000690:	05db      	lsls	r3, r3, #23
 8000692:	2110      	movs	r1, #16
 8000694:	430a      	orrs	r2, r1
 8000696:	621a      	str	r2, [r3, #32]

	TIM2->PSC = 10;	// prescaler
 8000698:	2380      	movs	r3, #128	; 0x80
 800069a:	05db      	lsls	r3, r3, #23
 800069c:	220a      	movs	r2, #10
 800069e:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 16000; // %100 duty cycle
 80006a0:	2380      	movs	r3, #128	; 0x80
 80006a2:	05db      	lsls	r3, r3, #23
 80006a4:	22fa      	movs	r2, #250	; 0xfa
 80006a6:	0192      	lsls	r2, r2, #6
 80006a8:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCR2 = 0;		//first value 0/16000
 80006aa:	2380      	movs	r3, #128	; 0x80
 80006ac:	05db      	lsls	r3, r3, #23
 80006ae:	2200      	movs	r2, #0
 80006b0:	639a      	str	r2, [r3, #56]	; 0x38

	TIM2->DIER |= (1 << 0); //update interrupt
 80006b2:	2380      	movs	r3, #128	; 0x80
 80006b4:	05db      	lsls	r3, r3, #23
 80006b6:	68da      	ldr	r2, [r3, #12]
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	05db      	lsls	r3, r3, #23
 80006bc:	2101      	movs	r1, #1
 80006be:	430a      	orrs	r2, r1
 80006c0:	60da      	str	r2, [r3, #12]

	TIM2->CR1 |= 1 << 0; //enable pwm
 80006c2:	2380      	movs	r3, #128	; 0x80
 80006c4:	05db      	lsls	r3, r3, #23
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	2380      	movs	r3, #128	; 0x80
 80006ca:	05db      	lsls	r3, r3, #23
 80006cc:	2101      	movs	r1, #1
 80006ce:	430a      	orrs	r2, r1
 80006d0:	601a      	str	r2, [r3, #0]

	NVIC_SetPriority(TIM2_IRQn,1);
 80006d2:	2101      	movs	r1, #1
 80006d4:	200f      	movs	r0, #15
 80006d6:	f7ff fdbb 	bl	8000250 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn);
 80006da:	200f      	movs	r0, #15
 80006dc:	f7ff fd9e 	bl	800021c <__NVIC_EnableIRQ>

}
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	40021000 	.word	0x40021000

080006ec <PWM_Value>:

void PWM_Value(){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	pwm_value = 1600*factor; //pwm value
 80006f0:	4b05      	ldr	r3, [pc, #20]	; (8000708 <PWM_Value+0x1c>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	22c8      	movs	r2, #200	; 0xc8
 80006f8:	00d2      	lsls	r2, r2, #3
 80006fa:	4353      	muls	r3, r2
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	4b03      	ldr	r3, [pc, #12]	; (800070c <PWM_Value+0x20>)
 8000700:	801a      	strh	r2, [r3, #0]
}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	2000002c 	.word	0x2000002c
 800070c:	20000024 	.word	0x20000024

08000710 <TIM2_IRQHandler>:

void TIM2_IRQHandler()
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	read_Key();
 8000714:	f000 f832 	bl	800077c <read_Key>
	PWM_Value();
 8000718:	f7ff ffe8 	bl	80006ec <PWM_Value>
	TIM2-> CCR2 = pwm_value;
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <TIM2_IRQHandler+0x58>)
 800071e:	881a      	ldrh	r2, [r3, #0]
 8000720:	2380      	movs	r3, #128	; 0x80
 8000722:	05db      	lsls	r3, r3, #23
 8000724:	639a      	str	r2, [r3, #56]	; 0x38

	counter = counter + 1;
 8000726:	4b11      	ldr	r3, [pc, #68]	; (800076c <TIM2_IRQHandler+0x5c>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	1c5a      	adds	r2, r3, #1
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <TIM2_IRQHandler+0x5c>)
 800072e:	601a      	str	r2, [r3, #0]
	if(counter == 200000) //read duty cycle value
 8000730:	4b0e      	ldr	r3, [pc, #56]	; (800076c <TIM2_IRQHandler+0x5c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a0e      	ldr	r2, [pc, #56]	; (8000770 <TIM2_IRQHandler+0x60>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d112      	bne.n	8000760 <TIM2_IRQHandler+0x50>
	{
		printChar(key_value_1);
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <TIM2_IRQHandler+0x64>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	0018      	movs	r0, r3
 8000740:	f7ff ff02 	bl	8000548 <printChar>
		printChar(key_value_2);
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <TIM2_IRQHandler+0x68>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	0018      	movs	r0, r3
 800074a:	f7ff fefd 	bl	8000548 <printChar>
		printChar('\n');
 800074e:	200a      	movs	r0, #10
 8000750:	f7ff fefa 	bl	8000548 <printChar>
		printChar('\r');
 8000754:	200d      	movs	r0, #13
 8000756:	f7ff fef7 	bl	8000548 <printChar>
		counter = 0;
 800075a:	4b04      	ldr	r3, [pc, #16]	; (800076c <TIM2_IRQHandler+0x5c>)
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
	}
}
 8000760:	46c0      	nop			; (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	20000024 	.word	0x20000024
 800076c:	20000028 	.word	0x20000028
 8000770:	00030d40 	.word	0x00030d40
 8000774:	20000000 	.word	0x20000000
 8000778:	20000001 	.word	0x20000001

0800077c <read_Key>:

void read_Key(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	GPIOB->ODR |= (0x1E << 0); //all high
 8000780:	4b8f      	ldr	r3, [pc, #572]	; (80009c0 <read_Key+0x244>)
 8000782:	695a      	ldr	r2, [r3, #20]
 8000784:	4b8e      	ldr	r3, [pc, #568]	; (80009c0 <read_Key+0x244>)
 8000786:	211e      	movs	r1, #30
 8000788:	430a      	orrs	r2, r1
 800078a:	615a      	str	r2, [r3, #20]
	GPIOB->ODR &= ~(1U << 1); //PB1 low
 800078c:	4b8c      	ldr	r3, [pc, #560]	; (80009c0 <read_Key+0x244>)
 800078e:	695a      	ldr	r2, [r3, #20]
 8000790:	4b8b      	ldr	r3, [pc, #556]	; (80009c0 <read_Key+0x244>)
 8000792:	2102      	movs	r1, #2
 8000794:	438a      	bics	r2, r1
 8000796:	615a      	str	r2, [r3, #20]

	if(!(GPIOA->IDR & (1U << 4)))
 8000798:	23a0      	movs	r3, #160	; 0xa0
 800079a:	05db      	lsls	r3, r3, #23
 800079c:	691b      	ldr	r3, [r3, #16]
 800079e:	2210      	movs	r2, #16
 80007a0:	4013      	ands	r3, r2
 80007a2:	d102      	bne.n	80007aa <read_Key+0x2e>
	{
		password = 1; //1
 80007a4:	4b87      	ldr	r3, [pc, #540]	; (80009c4 <read_Key+0x248>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	701a      	strb	r2, [r3, #0]

	}
	if(!(GPIOA->IDR & (1U << 5)))
 80007aa:	23a0      	movs	r3, #160	; 0xa0
 80007ac:	05db      	lsls	r3, r3, #23
 80007ae:	691b      	ldr	r3, [r3, #16]
 80007b0:	2220      	movs	r2, #32
 80007b2:	4013      	ands	r3, r2
 80007b4:	d102      	bne.n	80007bc <read_Key+0x40>
	{
		password = 0; //2
 80007b6:	4b83      	ldr	r3, [pc, #524]	; (80009c4 <read_Key+0x248>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
	}
	if(!(GPIOA->IDR & (1U << 6)))
 80007bc:	23a0      	movs	r3, #160	; 0xa0
 80007be:	05db      	lsls	r3, r3, #23
 80007c0:	691b      	ldr	r3, [r3, #16]
 80007c2:	2240      	movs	r2, #64	; 0x40
 80007c4:	4013      	ands	r3, r2
 80007c6:	d102      	bne.n	80007ce <read_Key+0x52>
	{
		password = 0; //3
 80007c8:	4b7e      	ldr	r3, [pc, #504]	; (80009c4 <read_Key+0x248>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	701a      	strb	r2, [r3, #0]
	}
	if(!(GPIOA->IDR & (1U << 7)))
 80007ce:	23a0      	movs	r3, #160	; 0xa0
 80007d0:	05db      	lsls	r3, r3, #23
 80007d2:	691b      	ldr	r3, [r3, #16]
 80007d4:	2280      	movs	r2, #128	; 0x80
 80007d6:	4013      	ands	r3, r2
 80007d8:	d102      	bne.n	80007e0 <read_Key+0x64>
	{
		password = 0; //A
 80007da:	4b7a      	ldr	r3, [pc, #488]	; (80009c4 <read_Key+0x248>)
 80007dc:	2200      	movs	r2, #0
 80007de:	701a      	strb	r2, [r3, #0]
	}


	GPIOB->ODR |= (0x1E << 0);
 80007e0:	4b77      	ldr	r3, [pc, #476]	; (80009c0 <read_Key+0x244>)
 80007e2:	695a      	ldr	r2, [r3, #20]
 80007e4:	4b76      	ldr	r3, [pc, #472]	; (80009c0 <read_Key+0x244>)
 80007e6:	211e      	movs	r1, #30
 80007e8:	430a      	orrs	r2, r1
 80007ea:	615a      	str	r2, [r3, #20]
	GPIOB->ODR &= ~(1U << 2); //PB2 low
 80007ec:	4b74      	ldr	r3, [pc, #464]	; (80009c0 <read_Key+0x244>)
 80007ee:	695a      	ldr	r2, [r3, #20]
 80007f0:	4b73      	ldr	r3, [pc, #460]	; (80009c0 <read_Key+0x244>)
 80007f2:	2104      	movs	r1, #4
 80007f4:	438a      	bics	r2, r1
 80007f6:	615a      	str	r2, [r3, #20]

	if(!(GPIOA->IDR & (1U << 4)))
 80007f8:	23a0      	movs	r3, #160	; 0xa0
 80007fa:	05db      	lsls	r3, r3, #23
 80007fc:	691b      	ldr	r3, [r3, #16]
 80007fe:	2210      	movs	r2, #16
 8000800:	4013      	ands	r3, r2
 8000802:	d102      	bne.n	800080a <read_Key+0x8e>
	{
		password = 0; //4
 8000804:	4b6f      	ldr	r3, [pc, #444]	; (80009c4 <read_Key+0x248>)
 8000806:	2200      	movs	r2, #0
 8000808:	701a      	strb	r2, [r3, #0]
	}
	if(!(GPIOA->IDR & (1U << 5)))
 800080a:	23a0      	movs	r3, #160	; 0xa0
 800080c:	05db      	lsls	r3, r3, #23
 800080e:	691b      	ldr	r3, [r3, #16]
 8000810:	2220      	movs	r2, #32
 8000812:	4013      	ands	r3, r2
 8000814:	d102      	bne.n	800081c <read_Key+0xa0>
	{
		password = 0; //5
 8000816:	4b6b      	ldr	r3, [pc, #428]	; (80009c4 <read_Key+0x248>)
 8000818:	2200      	movs	r2, #0
 800081a:	701a      	strb	r2, [r3, #0]
	}
	if(!(GPIOA->IDR & (1U << 6)))
 800081c:	23a0      	movs	r3, #160	; 0xa0
 800081e:	05db      	lsls	r3, r3, #23
 8000820:	691b      	ldr	r3, [r3, #16]
 8000822:	2240      	movs	r2, #64	; 0x40
 8000824:	4013      	ands	r3, r2
 8000826:	d102      	bne.n	800082e <read_Key+0xb2>
	{
		password = 0; //6
 8000828:	4b66      	ldr	r3, [pc, #408]	; (80009c4 <read_Key+0x248>)
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]
	}
	if(!(GPIOA->IDR & (1U << 7)))
 800082e:	23a0      	movs	r3, #160	; 0xa0
 8000830:	05db      	lsls	r3, r3, #23
 8000832:	691b      	ldr	r3, [r3, #16]
 8000834:	2280      	movs	r2, #128	; 0x80
 8000836:	4013      	ands	r3, r2
 8000838:	d102      	bne.n	8000840 <read_Key+0xc4>
	{
		password = 0; //B
 800083a:	4b62      	ldr	r3, [pc, #392]	; (80009c4 <read_Key+0x248>)
 800083c:	2200      	movs	r2, #0
 800083e:	701a      	strb	r2, [r3, #0]
	}

	GPIOB->ODR |= (0x1E << 0);
 8000840:	4b5f      	ldr	r3, [pc, #380]	; (80009c0 <read_Key+0x244>)
 8000842:	695a      	ldr	r2, [r3, #20]
 8000844:	4b5e      	ldr	r3, [pc, #376]	; (80009c0 <read_Key+0x244>)
 8000846:	211e      	movs	r1, #30
 8000848:	430a      	orrs	r2, r1
 800084a:	615a      	str	r2, [r3, #20]
	GPIOB->ODR &= ~(1U << 3); //PB3 low
 800084c:	4b5c      	ldr	r3, [pc, #368]	; (80009c0 <read_Key+0x244>)
 800084e:	695a      	ldr	r2, [r3, #20]
 8000850:	4b5b      	ldr	r3, [pc, #364]	; (80009c0 <read_Key+0x244>)
 8000852:	2108      	movs	r1, #8
 8000854:	438a      	bics	r2, r1
 8000856:	615a      	str	r2, [r3, #20]

	if(!(GPIOA->IDR & (1U << 4)))
 8000858:	23a0      	movs	r3, #160	; 0xa0
 800085a:	05db      	lsls	r3, r3, #23
 800085c:	691b      	ldr	r3, [r3, #16]
 800085e:	2210      	movs	r2, #16
 8000860:	4013      	ands	r3, r2
 8000862:	d102      	bne.n	800086a <read_Key+0xee>
	{
		password = 0; //7
 8000864:	4b57      	ldr	r3, [pc, #348]	; (80009c4 <read_Key+0x248>)
 8000866:	2200      	movs	r2, #0
 8000868:	701a      	strb	r2, [r3, #0]
	}
	if(!(GPIOA->IDR & (1U << 5)))
 800086a:	23a0      	movs	r3, #160	; 0xa0
 800086c:	05db      	lsls	r3, r3, #23
 800086e:	691b      	ldr	r3, [r3, #16]
 8000870:	2220      	movs	r2, #32
 8000872:	4013      	ands	r3, r2
 8000874:	d102      	bne.n	800087c <read_Key+0x100>
	{
		password = 0; //8
 8000876:	4b53      	ldr	r3, [pc, #332]	; (80009c4 <read_Key+0x248>)
 8000878:	2200      	movs	r2, #0
 800087a:	701a      	strb	r2, [r3, #0]
	}
	if(!(GPIOA->IDR & (1U << 6)))
 800087c:	23a0      	movs	r3, #160	; 0xa0
 800087e:	05db      	lsls	r3, r3, #23
 8000880:	691b      	ldr	r3, [r3, #16]
 8000882:	2240      	movs	r2, #64	; 0x40
 8000884:	4013      	ands	r3, r2
 8000886:	d102      	bne.n	800088e <read_Key+0x112>
	{
		password = 9; //9
 8000888:	4b4e      	ldr	r3, [pc, #312]	; (80009c4 <read_Key+0x248>)
 800088a:	2209      	movs	r2, #9
 800088c:	701a      	strb	r2, [r3, #0]
	}
	if(!(GPIOA->IDR & (1U << 7)))
 800088e:	23a0      	movs	r3, #160	; 0xa0
 8000890:	05db      	lsls	r3, r3, #23
 8000892:	691b      	ldr	r3, [r3, #16]
 8000894:	2280      	movs	r2, #128	; 0x80
 8000896:	4013      	ands	r3, r2
 8000898:	d102      	bne.n	80008a0 <read_Key+0x124>
	{
		password = 0; //C
 800089a:	4b4a      	ldr	r3, [pc, #296]	; (80009c4 <read_Key+0x248>)
 800089c:	2200      	movs	r2, #0
 800089e:	701a      	strb	r2, [r3, #0]
	}


	GPIOB->ODR |= (0x1E << 0);
 80008a0:	4b47      	ldr	r3, [pc, #284]	; (80009c0 <read_Key+0x244>)
 80008a2:	695a      	ldr	r2, [r3, #20]
 80008a4:	4b46      	ldr	r3, [pc, #280]	; (80009c0 <read_Key+0x244>)
 80008a6:	211e      	movs	r1, #30
 80008a8:	430a      	orrs	r2, r1
 80008aa:	615a      	str	r2, [r3, #20]
	GPIOB->ODR &= ~(1U << 4); //PB4 low
 80008ac:	4b44      	ldr	r3, [pc, #272]	; (80009c0 <read_Key+0x244>)
 80008ae:	695a      	ldr	r2, [r3, #20]
 80008b0:	4b43      	ldr	r3, [pc, #268]	; (80009c0 <read_Key+0x244>)
 80008b2:	2110      	movs	r1, #16
 80008b4:	438a      	bics	r2, r1
 80008b6:	615a      	str	r2, [r3, #20]

	if(!(GPIOA->IDR & (1U << 4)))
 80008b8:	23a0      	movs	r3, #160	; 0xa0
 80008ba:	05db      	lsls	r3, r3, #23
 80008bc:	691b      	ldr	r3, [r3, #16]
 80008be:	2210      	movs	r2, #16
 80008c0:	4013      	ands	r3, r2
 80008c2:	d102      	bne.n	80008ca <read_Key+0x14e>
	{
		password = 0; //*
 80008c4:	4b3f      	ldr	r3, [pc, #252]	; (80009c4 <read_Key+0x248>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	701a      	strb	r2, [r3, #0]
	}
	if(!(GPIOA->IDR & (1U << 5)))
 80008ca:	23a0      	movs	r3, #160	; 0xa0
 80008cc:	05db      	lsls	r3, r3, #23
 80008ce:	691b      	ldr	r3, [r3, #16]
 80008d0:	2220      	movs	r2, #32
 80008d2:	4013      	ands	r3, r2
 80008d4:	d10d      	bne.n	80008f2 <read_Key+0x176>
	{
		if(password == 1) //0
 80008d6:	4b3b      	ldr	r3, [pc, #236]	; (80009c4 <read_Key+0x248>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d102      	bne.n	80008e4 <read_Key+0x168>
			password = 2;
 80008de:	4b39      	ldr	r3, [pc, #228]	; (80009c4 <read_Key+0x248>)
 80008e0:	2202      	movs	r2, #2
 80008e2:	701a      	strb	r2, [r3, #0]
		if(password == 9)
 80008e4:	4b37      	ldr	r3, [pc, #220]	; (80009c4 <read_Key+0x248>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b09      	cmp	r3, #9
 80008ea:	d102      	bne.n	80008f2 <read_Key+0x176>
			password =10;
 80008ec:	4b35      	ldr	r3, [pc, #212]	; (80009c4 <read_Key+0x248>)
 80008ee:	220a      	movs	r2, #10
 80008f0:	701a      	strb	r2, [r3, #0]
	}
	if(!(GPIOA->IDR & (1U << 6)))
 80008f2:	23a0      	movs	r3, #160	; 0xa0
 80008f4:	05db      	lsls	r3, r3, #23
 80008f6:	691b      	ldr	r3, [r3, #16]
 80008f8:	2240      	movs	r2, #64	; 0x40
 80008fa:	4013      	ands	r3, r2
 80008fc:	d10d      	bne.n	800091a <read_Key+0x19e>
	{
		if(password == 10) //#
 80008fe:	4b31      	ldr	r3, [pc, #196]	; (80009c4 <read_Key+0x248>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b0a      	cmp	r3, #10
 8000904:	d102      	bne.n	800090c <read_Key+0x190>
			password = 11;
 8000906:	4b2f      	ldr	r3, [pc, #188]	; (80009c4 <read_Key+0x248>)
 8000908:	220b      	movs	r2, #11
 800090a:	701a      	strb	r2, [r3, #0]
		if(password == 2)
 800090c:	4b2d      	ldr	r3, [pc, #180]	; (80009c4 <read_Key+0x248>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2b02      	cmp	r3, #2
 8000912:	d102      	bne.n	800091a <read_Key+0x19e>
			password = 3;
 8000914:	4b2b      	ldr	r3, [pc, #172]	; (80009c4 <read_Key+0x248>)
 8000916:	2203      	movs	r2, #3
 8000918:	701a      	strb	r2, [r3, #0]
	}
	if(!(GPIOA->IDR & (1U << 7)))
 800091a:	23a0      	movs	r3, #160	; 0xa0
 800091c:	05db      	lsls	r3, r3, #23
 800091e:	691b      	ldr	r3, [r3, #16]
 8000920:	2280      	movs	r2, #128	; 0x80
 8000922:	4013      	ands	r3, r2
 8000924:	d102      	bne.n	800092c <read_Key+0x1b0>
	{
		password = 0; //D
 8000926:	4b27      	ldr	r3, [pc, #156]	; (80009c4 <read_Key+0x248>)
 8000928:	2200      	movs	r2, #0
 800092a:	701a      	strb	r2, [r3, #0]
	}

	if(password == 3) //10# password
 800092c:	4b25      	ldr	r3, [pc, #148]	; (80009c4 <read_Key+0x248>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b03      	cmp	r3, #3
 8000932:	d11e      	bne.n	8000972 <read_Key+0x1f6>
	{
		factor = 1;
 8000934:	4b24      	ldr	r3, [pc, #144]	; (80009c8 <read_Key+0x24c>)
 8000936:	2201      	movs	r2, #1
 8000938:	601a      	str	r2, [r3, #0]
		key_value_1 = '1';
 800093a:	4b24      	ldr	r3, [pc, #144]	; (80009cc <read_Key+0x250>)
 800093c:	2231      	movs	r2, #49	; 0x31
 800093e:	701a      	strb	r2, [r3, #0]
		key_value_2 = '0';
 8000940:	4b23      	ldr	r3, [pc, #140]	; (80009d0 <read_Key+0x254>)
 8000942:	2230      	movs	r2, #48	; 0x30
 8000944:	701a      	strb	r2, [r3, #0]
		printChar(key_value_1);
 8000946:	4b21      	ldr	r3, [pc, #132]	; (80009cc <read_Key+0x250>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	0018      	movs	r0, r3
 800094c:	f7ff fdfc 	bl	8000548 <printChar>
		printChar(key_value_2);
 8000950:	4b1f      	ldr	r3, [pc, #124]	; (80009d0 <read_Key+0x254>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	0018      	movs	r0, r3
 8000956:	f7ff fdf7 	bl	8000548 <printChar>
		printChar('\n');
 800095a:	200a      	movs	r0, #10
 800095c:	f7ff fdf4 	bl	8000548 <printChar>
		printChar('\r');
 8000960:	200d      	movs	r0, #13
 8000962:	f7ff fdf1 	bl	8000548 <printChar>
		counter = 0;
 8000966:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <read_Key+0x258>)
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
		password = 0;
 800096c:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <read_Key+0x248>)
 800096e:	2200      	movs	r2, #0
 8000970:	701a      	strb	r2, [r3, #0]
	}
	if(password == 11) //90# password
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <read_Key+0x248>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2b0b      	cmp	r3, #11
 8000978:	d11e      	bne.n	80009b8 <read_Key+0x23c>
	{
		factor = 9;
 800097a:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <read_Key+0x24c>)
 800097c:	2209      	movs	r2, #9
 800097e:	601a      	str	r2, [r3, #0]
		key_value_1 = '9';
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <read_Key+0x250>)
 8000982:	2239      	movs	r2, #57	; 0x39
 8000984:	701a      	strb	r2, [r3, #0]
		key_value_2 = '0';
 8000986:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <read_Key+0x254>)
 8000988:	2230      	movs	r2, #48	; 0x30
 800098a:	701a      	strb	r2, [r3, #0]
		printChar(key_value_1);
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <read_Key+0x250>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	0018      	movs	r0, r3
 8000992:	f7ff fdd9 	bl	8000548 <printChar>
		printChar(key_value_2);
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <read_Key+0x254>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	0018      	movs	r0, r3
 800099c:	f7ff fdd4 	bl	8000548 <printChar>
		printChar('\n');
 80009a0:	200a      	movs	r0, #10
 80009a2:	f7ff fdd1 	bl	8000548 <printChar>
		printChar('\r');
 80009a6:	200d      	movs	r0, #13
 80009a8:	f7ff fdce 	bl	8000548 <printChar>
		counter = 0;
 80009ac:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <read_Key+0x258>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
		password = 0;
 80009b2:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <read_Key+0x248>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	701a      	strb	r2, [r3, #0]
	}
}
 80009b8:	46c0      	nop			; (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	50000400 	.word	0x50000400
 80009c4:	20000030 	.word	0x20000030
 80009c8:	2000002c 	.word	0x2000002c
 80009cc:	20000000 	.word	0x20000000
 80009d0:	20000001 	.word	0x20000001
 80009d4:	20000028 	.word	0x20000028

080009d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009d8:	480d      	ldr	r0, [pc, #52]	; (8000a10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009da:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009dc:	f000 f826 	bl	8000a2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e0:	480c      	ldr	r0, [pc, #48]	; (8000a14 <LoopForever+0x6>)
  ldr r1, =_edata
 80009e2:	490d      	ldr	r1, [pc, #52]	; (8000a18 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009e4:	4a0d      	ldr	r2, [pc, #52]	; (8000a1c <LoopForever+0xe>)
  movs r3, #0
 80009e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e8:	e002      	b.n	80009f0 <LoopCopyDataInit>

080009ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ee:	3304      	adds	r3, #4

080009f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f4:	d3f9      	bcc.n	80009ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009f6:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009f8:	4c0a      	ldr	r4, [pc, #40]	; (8000a24 <LoopForever+0x16>)
  movs r3, #0
 80009fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009fc:	e001      	b.n	8000a02 <LoopFillZerobss>

080009fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a00:	3204      	adds	r2, #4

08000a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a04:	d3fb      	bcc.n	80009fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a06:	f000 f81d 	bl	8000a44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a0a:	f7ff fc8f 	bl	800032c <main>

08000a0e <LoopForever>:

LoopForever:
    b LoopForever
 8000a0e:	e7fe      	b.n	8000a0e <LoopForever>
  ldr   r0, =_estack
 8000a10:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a18:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000a1c:	08000aac 	.word	0x08000aac
  ldr r2, =_sbss
 8000a20:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000a24:	20000034 	.word	0x20000034

08000a28 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a28:	e7fe      	b.n	8000a28 <ADC_COMP_IRQHandler>
	...

08000a2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a30:	4b03      	ldr	r3, [pc, #12]	; (8000a40 <SystemInit+0x14>)
 8000a32:	2280      	movs	r2, #128	; 0x80
 8000a34:	0512      	lsls	r2, r2, #20
 8000a36:	609a      	str	r2, [r3, #8]
#endif
}
 8000a38:	46c0      	nop			; (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <__libc_init_array>:
 8000a44:	b570      	push	{r4, r5, r6, lr}
 8000a46:	2600      	movs	r6, #0
 8000a48:	4d0c      	ldr	r5, [pc, #48]	; (8000a7c <__libc_init_array+0x38>)
 8000a4a:	4c0d      	ldr	r4, [pc, #52]	; (8000a80 <__libc_init_array+0x3c>)
 8000a4c:	1b64      	subs	r4, r4, r5
 8000a4e:	10a4      	asrs	r4, r4, #2
 8000a50:	42a6      	cmp	r6, r4
 8000a52:	d109      	bne.n	8000a68 <__libc_init_array+0x24>
 8000a54:	2600      	movs	r6, #0
 8000a56:	f000 f819 	bl	8000a8c <_init>
 8000a5a:	4d0a      	ldr	r5, [pc, #40]	; (8000a84 <__libc_init_array+0x40>)
 8000a5c:	4c0a      	ldr	r4, [pc, #40]	; (8000a88 <__libc_init_array+0x44>)
 8000a5e:	1b64      	subs	r4, r4, r5
 8000a60:	10a4      	asrs	r4, r4, #2
 8000a62:	42a6      	cmp	r6, r4
 8000a64:	d105      	bne.n	8000a72 <__libc_init_array+0x2e>
 8000a66:	bd70      	pop	{r4, r5, r6, pc}
 8000a68:	00b3      	lsls	r3, r6, #2
 8000a6a:	58eb      	ldr	r3, [r5, r3]
 8000a6c:	4798      	blx	r3
 8000a6e:	3601      	adds	r6, #1
 8000a70:	e7ee      	b.n	8000a50 <__libc_init_array+0xc>
 8000a72:	00b3      	lsls	r3, r6, #2
 8000a74:	58eb      	ldr	r3, [r5, r3]
 8000a76:	4798      	blx	r3
 8000a78:	3601      	adds	r6, #1
 8000a7a:	e7f2      	b.n	8000a62 <__libc_init_array+0x1e>
 8000a7c:	08000aa4 	.word	0x08000aa4
 8000a80:	08000aa4 	.word	0x08000aa4
 8000a84:	08000aa4 	.word	0x08000aa4
 8000a88:	08000aa8 	.word	0x08000aa8

08000a8c <_init>:
 8000a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a92:	bc08      	pop	{r3}
 8000a94:	469e      	mov	lr, r3
 8000a96:	4770      	bx	lr

08000a98 <_fini>:
 8000a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a9e:	bc08      	pop	{r3}
 8000aa0:	469e      	mov	lr, r3
 8000aa2:	4770      	bx	lr
